{"ast":null,"code":"import React,{createContext,useState,useEffect,useContext}from'react';import axios from'axios';// Create the auth context\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// Check if user is already logged in on component mount and validate token\nuseEffect(()=>{const validateToken=async()=>{console.log('[AuthContext] Starting token validation...');const token=localStorage.getItem('token');const userJson=localStorage.getItem('user');console.log('[AuthContext] Token exists:',!!token);console.log('[AuthContext] User data exists:',!!userJson);if(token){try{// Create an axios instance with the token\nconst instance=axios.create({headers:{'Authorization':`Bearer ${token}`}});// If we have cached user data, use it immediately\nif(userJson){try{const cachedUser=JSON.parse(userJson);console.log('[AuthContext] Using cached user data:',cachedUser.username);setCurrentUser({...cachedUser,accessToken:token});}catch(parseError){console.error('[AuthContext] Error parsing cached user data:',parseError);localStorage.removeItem('user');}}// Make a request to the auth/me endpoint to validate the token and get fresh data\ntry{const response=await instance.get('/api/auth/me');console.log('[AuthContext] Token validation successful');// If the request succeeds, the token is valid\n// Update user data with the latest from the server\nconst{id,username,email,fullName,roles,userCode}=response.data;const updatedUser={id,username,email,fullName,roles,userCode,accessToken:token};localStorage.setItem('user',JSON.stringify(updatedUser));setCurrentUser(updatedUser);}catch(error){console.error('[AuthContext] Token validation failed:',error);// If the request fails with 401, the token is invalid or expired\nif(error.response&&error.response.status===401){console.log('[AuthContext] Token expired/invalid, clearing auth data');localStorage.removeItem('token');localStorage.removeItem('user');setCurrentUser(null);}else if(!userJson){console.log('[AuthContext] No cached user data and token validation failed, clearing auth');// If we don't have cached user data and can't validate token, clear everything\nlocalStorage.removeItem('token');localStorage.removeItem('user');setCurrentUser(null);}else{console.log('[AuthContext] Network error but keeping cached user data');}// If we have cached user data and it's just a network error, keep the user logged in\n}}catch(error){console.error('[AuthContext] Error processing stored user data during token validation:',error);localStorage.removeItem('token');localStorage.removeItem('user');setCurrentUser(null);// Clear user if there's an error\n}}else{console.log('[AuthContext] No token found, user not authenticated');}console.log('[AuthContext] Token validation complete, setting loading to false');setLoading(false);};validateToken();},[]);// Login function\nconst login=async(username,password)=>{try{setLoading(true);setError(null);const response=await axios.post('/api/auth/signin',{username,password});const{token,id,username:userName,email,fullName,roles,userCode}=response.data;// Store token and user info\nlocalStorage.setItem('token',token);const user={id,username:userName,email,fullName,roles,userCode,accessToken:token// Include the token in the currentUser object\n};localStorage.setItem('user',JSON.stringify(user));// Store user (with token)\nsetCurrentUser(user);return{success:true,user};// MODIFIED: return user object\n}catch(error){var _error$response,_error$response$data,_error$response2,_error$response2$data;setError(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Login failed. Please check your credentials.');return{success:false,message:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Login failed. Please check your credentials.'};}finally{setLoading(false);}};// Register function\nconst register=async(username,email,password,fullName,phone,role)=>{try{setLoading(true);setError(null);const response=await axios.post('/api/auth/signup',{username,email,password,fullName,phone:phone||'',// Default to empty string if not provided\nrole:role||'Student'// Default to Student if not provided\n});return{success:true,message:response.data.message};}catch(error){var _error$response3,_error$response3$data,_error$response4,_error$response4$data;setError(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Registration failed. Please try again.');return{success:false,message:((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Registration failed. Please try again.'};}finally{setLoading(false);}};// Logout function\nconst logout=()=>{localStorage.removeItem('token');localStorage.removeItem('user');setCurrentUser(null);};// Check if user is authenticated\nconst isAuthenticated=()=>{return localStorage.getItem('token')!==null;};// Get authenticated axios instance\nconst getAuthAxios=()=>{const token=localStorage.getItem('token');// Also try to get token from user object as a fallback\nlet userToken=null;const userJson=localStorage.getItem('user');if(userJson){try{const user=JSON.parse(userJson);userToken=(user===null||user===void 0?void 0:user.accessToken)||(user===null||user===void 0?void 0:user.token);}catch(e){console.error('[getAuthAxios] Error parsing user JSON:',e);}}// Use the most reliable token source\nconst finalToken=token||userToken;const instance=axios.create({headers:{'Content-Type':'application/json','Authorization':finalToken?`Bearer ${finalToken}`:undefined}});// Log headers for debugging\n// Add request interceptor for dynamic token check\ninstance.interceptors.request.use(config=>{// Check token again at request time (in case it was updated)\nconst currentToken=localStorage.getItem('token');if(currentToken&&(!config.headers.Authorization||config.headers.Authorization!==`Bearer ${currentToken}`)){config.headers.Authorization=`Bearer ${currentToken}`;}return config;},error=>{return Promise.reject(error);});// Add response interceptor to handle 401 errors\ninstance.interceptors.response.use(response=>response,error=>{if(error.response&&error.response.status===401){logout();window.location.href='/login?error=session_expired';}return Promise.reject(error);});return instance;};// Context value\nconst value={currentUser,loading,error,login,register,logout,isAuthenticated,getAuthAxios};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!loading&&children});};// Custom hook to use the AuthContext\nexport const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","axios","jsx","_jsx","AuthContext","AuthProvider","_ref","children","currentUser","setCurrentUser","loading","setLoading","error","setError","validateToken","console","log","token","localStorage","getItem","userJson","instance","create","headers","cachedUser","JSON","parse","username","accessToken","parseError","removeItem","response","get","id","email","fullName","roles","userCode","data","updatedUser","setItem","stringify","status","login","password","post","userName","user","success","_error$response","_error$response$data","_error$response2","_error$response2$data","message","register","phone","role","_error$response3","_error$response3$data","_error$response4","_error$response4$data","logout","isAuthenticated","getAuthAxios","userToken","e","finalToken","undefined","interceptors","request","use","config","currentToken","Authorization","Promise","reject","window","location","href","value","Provider","useAuth","context","Error"],"sources":["C:/Users/trand/OneDrive/Documents/GitHub/SchoolMedicalManagement/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Create the auth context\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check if user is already logged in on component mount and validate token\r\n  useEffect(() => {\r\n    const validateToken = async () => {\r\n      console.log('[AuthContext] Starting token validation...');\r\n      const token = localStorage.getItem('token');\r\n      const userJson = localStorage.getItem('user');\r\n      console.log('[AuthContext] Token exists:', !!token);\r\n      console.log('[AuthContext] User data exists:', !!userJson);\r\n\r\n      if (token) {\r\n        try {\r\n          // Create an axios instance with the token\r\n          const instance = axios.create({\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`\r\n            }\r\n          });\r\n\r\n          // If we have cached user data, use it immediately\r\n          if (userJson) {\r\n            try {\r\n              const cachedUser = JSON.parse(userJson);\r\n              console.log('[AuthContext] Using cached user data:', cachedUser.username);\r\n              setCurrentUser({\r\n                ...cachedUser,\r\n                accessToken: token\r\n              });\r\n            } catch (parseError) {\r\n              console.error('[AuthContext] Error parsing cached user data:', parseError);\r\n              localStorage.removeItem('user');\r\n            }\r\n          }\r\n\r\n          // Make a request to the auth/me endpoint to validate the token and get fresh data\r\n          try {\r\n            const response = await instance.get('/api/auth/me');\r\n            console.log('[AuthContext] Token validation successful');\r\n            // If the request succeeds, the token is valid\r\n            // Update user data with the latest from the server\r\n            const { id, username, email, fullName, roles, userCode } = response.data;\r\n            const updatedUser = {\r\n              id,\r\n              username,\r\n              email,\r\n              fullName,\r\n              roles,\r\n              userCode,\r\n              accessToken: token\r\n            };\r\n            localStorage.setItem('user', JSON.stringify(updatedUser));\r\n            setCurrentUser(updatedUser);\r\n          } catch (error) {\r\n            console.error('[AuthContext] Token validation failed:', error);\r\n            // If the request fails with 401, the token is invalid or expired\r\n            if (error.response && error.response.status === 401) {\r\n              console.log('[AuthContext] Token expired/invalid, clearing auth data');\r\n              localStorage.removeItem('token');\r\n              localStorage.removeItem('user');\r\n              setCurrentUser(null);\r\n            } else if (!userJson) {\r\n              console.log('[AuthContext] No cached user data and token validation failed, clearing auth');\r\n              // If we don't have cached user data and can't validate token, clear everything\r\n              localStorage.removeItem('token');\r\n              localStorage.removeItem('user');\r\n              setCurrentUser(null);\r\n            } else {\r\n              console.log('[AuthContext] Network error but keeping cached user data');\r\n            }\r\n            // If we have cached user data and it's just a network error, keep the user logged in\r\n          }\r\n        } catch (error) {\r\n          console.error('[AuthContext] Error processing stored user data during token validation:', error);\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n          setCurrentUser(null); // Clear user if there's an error\r\n        }\r\n      } else {\r\n        console.log('[AuthContext] No token found, user not authenticated');\r\n      }\r\n\r\n      console.log('[AuthContext] Token validation complete, setting loading to false');\r\n      setLoading(false);\r\n    };\r\n\r\n    validateToken();\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (username, password) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await axios.post('/api/auth/signin', {\r\n        username,\r\n        password\r\n      });\r\n\r\n      const { token, id, username: userName, email, fullName, roles, userCode } = response.data;\r\n\r\n      // Store token and user info\r\n      localStorage.setItem('token', token);\r\n      const user = {\r\n        id,\r\n        username: userName,\r\n        email,\r\n        fullName,\r\n        roles,\r\n        userCode,\r\n        accessToken: token // Include the token in the currentUser object\r\n      };\r\n\r\n      localStorage.setItem('user', JSON.stringify(user)); // Store user (with token)\r\n      setCurrentUser(user);\r\n\r\n      return { success: true, user }; // MODIFIED: return user object\r\n    } catch (error) {\r\n      setError(error.response?.data?.message || 'Login failed. Please check your credentials.');\r\n      return { \r\n        success: false, \r\n        message: error.response?.data?.message || 'Login failed. Please check your credentials.' \r\n      };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (username, email, password, fullName, phone, role) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await axios.post('/api/auth/signup', {\r\n        username,\r\n        email,\r\n        password,\r\n        fullName,\r\n        phone: phone || '', // Default to empty string if not provided\r\n        role: role || 'Student' // Default to Student if not provided\r\n      });\r\n\r\n      return { \r\n        success: true, \r\n        message: response.data.message \r\n      };\r\n    } catch (error) {\r\n      setError(error.response?.data?.message || 'Registration failed. Please try again.');\r\n      return { \r\n        success: false, \r\n        message: error.response?.data?.message || 'Registration failed. Please try again.' \r\n      };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setCurrentUser(null);\r\n  };\r\n\r\n  // Check if user is authenticated\r\n  const isAuthenticated = () => {\r\n    return localStorage.getItem('token') !== null;\r\n  };\r\n\r\n  // Get authenticated axios instance\r\n  const getAuthAxios = () => {\r\n    const token = localStorage.getItem('token');\r\n    // Also try to get token from user object as a fallback\r\n    let userToken = null;\r\n    const userJson = localStorage.getItem('user');\r\n    if (userJson) {\r\n      try {\r\n        const user = JSON.parse(userJson);\r\n        userToken = user?.accessToken || user?.token;\r\n        } catch (e) {\r\n        console.error('[getAuthAxios] Error parsing user JSON:', e);\r\n      }\r\n    }\r\n    \r\n    // Use the most reliable token source\r\n    const finalToken = token || userToken;\r\n    const instance = axios.create({\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': finalToken ? `Bearer ${finalToken}` : undefined\r\n      }\r\n    });\r\n    \r\n    // Log headers for debugging\r\n    // Add request interceptor for dynamic token check\r\n    instance.interceptors.request.use(\r\n      config => {\r\n        // Check token again at request time (in case it was updated)\r\n        const currentToken = localStorage.getItem('token');\r\n        if (currentToken && (!config.headers.Authorization || config.headers.Authorization !== `Bearer ${currentToken}`)) {\r\n          config.headers.Authorization = `Bearer ${currentToken}`;\r\n        }\r\n        return config;\r\n      },\r\n      error => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    // Add response interceptor to handle 401 errors\r\n    instance.interceptors.response.use(\r\n      response => response,\r\n      error => {\r\n        if (error.response && error.response.status === 401) {\r\n          logout();\r\n          window.location.href = '/login?error=session_expired';\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    return instance;\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    error,\r\n    login,\r\n    register,\r\n    logout,\r\n    isAuthenticated,\r\n    getAuthAxios,\r\n  };\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the AuthContext\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}