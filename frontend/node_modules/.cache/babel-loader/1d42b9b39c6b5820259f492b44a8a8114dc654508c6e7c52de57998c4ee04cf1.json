{"ast":null,"code":"/**\r\n * Helper function to generate authorization headers for API requests\r\n * Used for authenticated endpoints that require JWT token\r\n */export default function authHeader(){// Try to get user from localStorage\nlet user=null;const userJson=localStorage.getItem('user');try{if(userJson){user=JSON.parse(userJson);}else{}}catch(e){console.error('[authHeader] Error parsing user from localStorage:',e);}// Also get direct token from localStorage as it might be stored there\nconst directToken=localStorage.getItem('token');let headers={};if(user&&user.accessToken){// First check if token is in the user object as accessToken\nheaders={'Authorization':'Bearer '+user.accessToken};}else if(user&&user.token){// Then check if token is in the user object as token\nheaders={'Authorization':'Bearer '+user.token};}else if(directToken){// Finally check if token is stored directly in localStorage\nheaders={'Authorization':'Bearer '+directToken};}else{return{};}return headers;}","map":{"version":3,"names":["authHeader","user","userJson","localStorage","getItem","JSON","parse","e","console","error","directToken","headers","accessToken","token"],"sources":["C:/Users/trand/OneDrive/Documents/GitHub/SchoolMedicalManagement/SchoolMedicalManagement/frontend/src/services/auth-header.js"],"sourcesContent":["/**\r\n * Helper function to generate authorization headers for API requests\r\n * Used for authenticated endpoints that require JWT token\r\n */\r\nexport default function authHeader() {\r\n  // Try to get user from localStorage\r\n  let user = null;\r\n  const userJson = localStorage.getItem('user');\r\n  \r\n  try {\r\n    if (userJson) {\r\n      user = JSON.parse(userJson);\r\n      } else {\r\n      }\r\n  } catch (e) {\r\n    console.error('[authHeader] Error parsing user from localStorage:', e);\r\n  }\r\n  \r\n  // Also get direct token from localStorage as it might be stored there\r\n  const directToken = localStorage.getItem('token');\r\n  let headers = {};\r\n\r\n  if (user && user.accessToken) {\r\n    // First check if token is in the user object as accessToken\r\n    headers = { 'Authorization': 'Bearer ' + user.accessToken };\r\n  } else if (user && user.token) {\r\n    // Then check if token is in the user object as token\r\n    headers = { 'Authorization': 'Bearer ' + user.token };\r\n  } else if (directToken) {\r\n    // Finally check if token is stored directly in localStorage\r\n    headers = { 'Authorization': 'Bearer ' + directToken };\r\n  } else {\r\n    return {};\r\n  }\r\n  \r\n  return headers;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,GACA,cAAe,SAAS,CAAAA,UAAUA,CAAA,CAAG,CACnC;AACA,GAAI,CAAAC,IAAI,CAAG,IAAI,CACf,KAAM,CAAAC,QAAQ,CAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAE7C,GAAI,CACF,GAAIF,QAAQ,CAAE,CACZD,IAAI,CAAGI,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC,CAC3B,CAAC,IAAM,CACP,CACJ,CAAE,MAAOK,CAAC,CAAE,CACVC,OAAO,CAACC,KAAK,CAAC,oDAAoD,CAAEF,CAAC,CAAC,CACxE,CAEA;AACA,KAAM,CAAAG,WAAW,CAAGP,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CACjD,GAAI,CAAAO,OAAO,CAAG,CAAC,CAAC,CAEhB,GAAIV,IAAI,EAAIA,IAAI,CAACW,WAAW,CAAE,CAC5B;AACAD,OAAO,CAAG,CAAE,eAAe,CAAE,SAAS,CAAGV,IAAI,CAACW,WAAY,CAAC,CAC7D,CAAC,IAAM,IAAIX,IAAI,EAAIA,IAAI,CAACY,KAAK,CAAE,CAC7B;AACAF,OAAO,CAAG,CAAE,eAAe,CAAE,SAAS,CAAGV,IAAI,CAACY,KAAM,CAAC,CACvD,CAAC,IAAM,IAAIH,WAAW,CAAE,CACtB;AACAC,OAAO,CAAG,CAAE,eAAe,CAAE,SAAS,CAAGD,WAAY,CAAC,CACxD,CAAC,IAAM,CACL,MAAO,CAAC,CAAC,CACX,CAEA,MAAO,CAAAC,OAAO,CAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}