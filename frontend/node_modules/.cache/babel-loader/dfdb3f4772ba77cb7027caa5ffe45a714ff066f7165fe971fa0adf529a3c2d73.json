{"ast":null,"code":"// Hook for managing grade levels\n// File: frontend/src/hooks/useGradeLevels.js\nimport{useState,useEffect,useCallback}from'react';import{getAllActiveGradeLevels,getGradeDisplayOptions}from'../utils/api';export const useGradeLevels=()=>{const[gradeLevels,setGradeLevels]=useState([]);const[gradeOptions,setGradeOptions]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// Helper to extract grade number from grade name - move outside useCallback to prevent dependencies\nconst getGradeNumber=gradeName=>{if(gradeName){// Handle format like \"6A\", \"7A\", \"8A\", \"9A\"\nif(gradeName.match(/^\\d+[A-Z]$/)){const num=parseInt(gradeName.substring(0,gradeName.length-1));return isNaN(num)?null:num;}// Handle format like \"Grade 1\", \"Grade 2\", etc.\nif(gradeName.startsWith('Grade ')){const num=parseInt(gradeName.substring(6));return isNaN(num)?null:num;}}return null;};const fetchGradeLevels=useCallback(async()=>{try{setLoading(true);setError(null);const gradeLevels=await getAllActiveGradeLevels();if(gradeLevels&&Array.isArray(gradeLevels)){// Sort by grade number\nconst sortedGrades=gradeLevels.sort((a,b)=>{const numA=getGradeNumber(a.gradeName);const numB=getGradeNumber(b.gradeName);return(numA||0)-(numB||0);});setGradeLevels(sortedGrades);const options=sortedGrades.map(grade=>grade.gradeName);setGradeOptions(options);}else{throw new Error('Invalid response format from API');}}catch(err){console.error('Error fetching grade levels:',err);setError(err.message||'Failed to fetch grade levels');// No fallback data - only show what's actually in the database\nsetGradeLevels([]);setGradeOptions([]);}finally{setLoading(false);}},[]);// Remove getGradeNumber dependency\nuseEffect(()=>{fetchGradeLevels();},[]);// Empty dependency array to run only once\n// Get grade name by number\nconst getGradeNameByNumber=useCallback(gradeNumber=>{const grade=gradeLevels.find(g=>getGradeNumber(g.gradeName)===gradeNumber);return grade?grade.gradeName:`Grade ${gradeNumber}`;},[gradeLevels]);// Get Vietnamese grade name by number (derived from English name)\nconst getVietnameseGradeNameByNumber=useCallback(gradeNumber=>{return`Lá»›p ${gradeNumber}`;},[]);// Get grade options for select components (using grade names)\nconst getGradeSelectOptionsByName=useCallback(function(){let useVietnamese=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;return gradeLevels.map(grade=>{const gradeNumber=getGradeNumber(grade.gradeName);return{value:grade.gradeName,// Use gradeName as value\nlabel:useVietnamese?getVietnameseGradeNameByNumber(gradeNumber):grade.gradeName,gradeId:grade.gradeId,gradeNumber:gradeNumber};}).filter(option=>option.gradeNumber!==null);},[gradeLevels,getVietnameseGradeNameByNumber]);// Get grade options for select components (using grade IDs)\nconst getGradeSelectOptions=useCallback(function(){let useVietnamese=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;return gradeLevels.map(grade=>{const gradeNumber=getGradeNumber(grade.gradeName);return{value:grade.gradeId,// Use gradeId instead of gradeNumber\nlabel:useVietnamese?getVietnameseGradeNameByNumber(gradeNumber):grade.gradeName,gradeId:grade.gradeId,gradeNumber:gradeNumber};}).filter(option=>option.gradeNumber!==null);},[gradeLevels,getVietnameseGradeNameByNumber]);// Get multiple grade selection options (for events targeting multiple grades)\nconst getMultipleGradeOptions=useCallback(function(){let selectedGrades=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];let useVietnamese=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return gradeLevels.map(grade=>{const gradeNumber=getGradeNumber(grade.gradeName);return{...grade,gradeNumber,selected:selectedGrades.includes(gradeNumber),displayName:useVietnamese?getVietnameseGradeNameByNumber(gradeNumber):grade.gradeName};}).filter(option=>option.gradeNumber!==null);},[gradeLevels,getVietnameseGradeNameByNumber]);// Format grade range for display\nconst formatGradeRange=useCallback(function(minGrade,maxGrade){let useVietnamese=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(minGrade===maxGrade){return useVietnamese?getVietnameseGradeNameByNumber(minGrade):getGradeNameByNumber(minGrade);}const minName=useVietnamese?getVietnameseGradeNameByNumber(minGrade):getGradeNameByNumber(minGrade);const maxName=useVietnamese?getVietnameseGradeNameByNumber(maxGrade):getGradeNameByNumber(maxGrade);return`${minName} - ${maxName}`;},[getGradeNameByNumber,getVietnameseGradeNameByNumber]);// Parse grade levels from string (e.g., \"Grade 1, Grade 3-5, Grade 7\")\nconst parseGradeLevelsString=useCallback(gradeString=>{if(!gradeString)return[];const gradeNumbers=[];const parts=gradeString.split(',').map(s=>s.trim());parts.forEach(part=>{if(part.includes('-')){// Handle range like \"Grade 3-5\"\nconst rangeParts=part.split('-');const start=parseInt(rangeParts[0].replace(/\\D/g,''));const end=parseInt(rangeParts[1].replace(/\\D/g,''));for(let i=start;i<=end;i++){if(i>=1&&i<=12){gradeNumbers.push(i);}}}else{// Handle single grade like \"Grade 1\"\nconst gradeNum=parseInt(part.replace(/\\D/g,''));if(gradeNum>=1&&gradeNum<=12){gradeNumbers.push(gradeNum);}}});return[...new Set(gradeNumbers)].sort((a,b)=>a-b);},[]);// Format array of grade numbers to string\nconst formatGradeNumbersToString=useCallback(function(gradeNumbers){let useVietnamese=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!gradeNumbers||gradeNumbers.length===0)return'';const sortedGrades=[...gradeNumbers].sort((a,b)=>a-b);const gradeNames=sortedGrades.map(num=>useVietnamese?getVietnameseGradeNameByNumber(num):getGradeNameByNumber(num));return gradeNames.join(', ');},[getGradeNameByNumber,getVietnameseGradeNameByNumber]);return{gradeLevels,gradeOptions,loading,error,// Utility functions\ngetGradeNumber,getGradeNameByNumber,getVietnameseGradeNameByNumber,getGradeSelectOptions,getGradeSelectOptionsByName,getMultipleGradeOptions,formatGradeRange,parseGradeLevelsString,formatGradeNumbersToString,// Refresh function\nrefetch:fetchGradeLevels};};export default useGradeLevels;","map":{"version":3,"names":["useState","useEffect","useCallback","getAllActiveGradeLevels","getGradeDisplayOptions","useGradeLevels","gradeLevels","setGradeLevels","gradeOptions","setGradeOptions","loading","setLoading","error","setError","getGradeNumber","gradeName","match","num","parseInt","substring","length","isNaN","startsWith","fetchGradeLevels","Array","isArray","sortedGrades","sort","a","b","numA","numB","options","map","grade","Error","err","console","message","getGradeNameByNumber","gradeNumber","find","g","getVietnameseGradeNameByNumber","getGradeSelectOptionsByName","useVietnamese","arguments","undefined","value","label","gradeId","filter","option","getGradeSelectOptions","getMultipleGradeOptions","selectedGrades","selected","includes","displayName","formatGradeRange","minGrade","maxGrade","minName","maxName","parseGradeLevelsString","gradeString","gradeNumbers","parts","split","s","trim","forEach","part","rangeParts","start","replace","end","i","push","gradeNum","Set","formatGradeNumbersToString","gradeNames","join","refetch"],"sources":["C:/Users/trand/OneDrive/Documents/GitHub/SchoolMedicalManagement/SchoolMedicalManagement/frontend/src/hooks/useGradeLevels.js"],"sourcesContent":["// Hook for managing grade levels\r\n// File: frontend/src/hooks/useGradeLevels.js\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { getAllActiveGradeLevels, getGradeDisplayOptions } from '../utils/api';\r\n\r\nexport const useGradeLevels = () => {\r\n  const [gradeLevels, setGradeLevels] = useState([]);\r\n  const [gradeOptions, setGradeOptions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Helper to extract grade number from grade name - move outside useCallback to prevent dependencies\r\n  const getGradeNumber = (gradeName) => {\r\n    if (gradeName) {\r\n      // Handle format like \"6A\", \"7A\", \"8A\", \"9A\"\r\n      if (gradeName.match(/^\\d+[A-Z]$/)) {\r\n        const num = parseInt(gradeName.substring(0, gradeName.length - 1));\r\n        return isNaN(num) ? null : num;\r\n      }\r\n      // Handle format like \"Grade 1\", \"Grade 2\", etc.\r\n      if (gradeName.startsWith('Grade ')) {\r\n        const num = parseInt(gradeName.substring(6));\r\n        return isNaN(num) ? null : num;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const fetchGradeLevels = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const gradeLevels = await getAllActiveGradeLevels();\r\n      if (gradeLevels && Array.isArray(gradeLevels)) {\r\n        // Sort by grade number\r\n        const sortedGrades = gradeLevels.sort((a, b) => {\r\n          const numA = getGradeNumber(a.gradeName);\r\n          const numB = getGradeNumber(b.gradeName);\r\n          return (numA || 0) - (numB || 0);\r\n        });\r\n        \r\n        setGradeLevels(sortedGrades);\r\n        \r\n        const options = sortedGrades.map(grade => grade.gradeName);\r\n        setGradeOptions(options);\r\n        \r\n        } else {\r\n        throw new Error('Invalid response format from API');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching grade levels:', err);\r\n      setError(err.message || 'Failed to fetch grade levels');\r\n      \r\n      // No fallback data - only show what's actually in the database\r\n      setGradeLevels([]);\r\n      setGradeOptions([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []); // Remove getGradeNumber dependency\r\n\r\n  useEffect(() => {\r\n    fetchGradeLevels();\r\n  }, []); // Empty dependency array to run only once\r\n\r\n  // Get grade name by number\r\n  const getGradeNameByNumber = useCallback((gradeNumber) => {\r\n    const grade = gradeLevels.find(g => getGradeNumber(g.gradeName) === gradeNumber);\r\n    return grade ? grade.gradeName : `Grade ${gradeNumber}`;\r\n  }, [gradeLevels]);\r\n\r\n  // Get Vietnamese grade name by number (derived from English name)\r\n  const getVietnameseGradeNameByNumber = useCallback((gradeNumber) => {\r\n    return `Lá»›p ${gradeNumber}`;\r\n  }, []);\r\n\r\n  // Get grade options for select components (using grade names)\r\n  const getGradeSelectOptionsByName = useCallback((useVietnamese = false) => {\r\n    return gradeLevels.map(grade => {\r\n      const gradeNumber = getGradeNumber(grade.gradeName);\r\n      return {\r\n        value: grade.gradeName, // Use gradeName as value\r\n        label: useVietnamese ? getVietnameseGradeNameByNumber(gradeNumber) : grade.gradeName,\r\n        gradeId: grade.gradeId,\r\n        gradeNumber: gradeNumber\r\n      };\r\n    }).filter(option => option.gradeNumber !== null);\r\n  }, [gradeLevels, getVietnameseGradeNameByNumber]);\r\n\r\n  // Get grade options for select components (using grade IDs)\r\n  const getGradeSelectOptions = useCallback((useVietnamese = false) => {\r\n    return gradeLevels.map(grade => {\r\n      const gradeNumber = getGradeNumber(grade.gradeName);\r\n      return {\r\n        value: grade.gradeId, // Use gradeId instead of gradeNumber\r\n        label: useVietnamese ? getVietnameseGradeNameByNumber(gradeNumber) : grade.gradeName,\r\n        gradeId: grade.gradeId,\r\n        gradeNumber: gradeNumber\r\n      };\r\n    }).filter(option => option.gradeNumber !== null);\r\n  }, [gradeLevels, getVietnameseGradeNameByNumber]);\r\n\r\n  // Get multiple grade selection options (for events targeting multiple grades)\r\n  const getMultipleGradeOptions = useCallback((selectedGrades = [], useVietnamese = false) => {\r\n    return gradeLevels.map(grade => {\r\n      const gradeNumber = getGradeNumber(grade.gradeName);\r\n      return {\r\n        ...grade,\r\n        gradeNumber,\r\n        selected: selectedGrades.includes(gradeNumber),\r\n        displayName: useVietnamese ? getVietnameseGradeNameByNumber(gradeNumber) : grade.gradeName\r\n      };\r\n    }).filter(option => option.gradeNumber !== null);\r\n  }, [gradeLevels, getVietnameseGradeNameByNumber]);\r\n\r\n  // Format grade range for display\r\n  const formatGradeRange = useCallback((minGrade, maxGrade, useVietnamese = false) => {\r\n    if (minGrade === maxGrade) {\r\n      return useVietnamese ? \r\n        getVietnameseGradeNameByNumber(minGrade) : \r\n        getGradeNameByNumber(minGrade);\r\n    }\r\n    \r\n    const minName = useVietnamese ? \r\n      getVietnameseGradeNameByNumber(minGrade) : \r\n      getGradeNameByNumber(minGrade);\r\n    const maxName = useVietnamese ? \r\n      getVietnameseGradeNameByNumber(maxGrade) : \r\n      getGradeNameByNumber(maxGrade);\r\n    \r\n    return `${minName} - ${maxName}`;\r\n  }, [getGradeNameByNumber, getVietnameseGradeNameByNumber]);\r\n\r\n  // Parse grade levels from string (e.g., \"Grade 1, Grade 3-5, Grade 7\")\r\n  const parseGradeLevelsString = useCallback((gradeString) => {\r\n    if (!gradeString) return [];\r\n    \r\n    const gradeNumbers = [];\r\n    const parts = gradeString.split(',').map(s => s.trim());\r\n    \r\n    parts.forEach(part => {\r\n      if (part.includes('-')) {\r\n        // Handle range like \"Grade 3-5\"\r\n        const rangeParts = part.split('-');\r\n        const start = parseInt(rangeParts[0].replace(/\\D/g, ''));\r\n        const end = parseInt(rangeParts[1].replace(/\\D/g, ''));\r\n        \r\n        for (let i = start; i <= end; i++) {\r\n          if (i >= 1 && i <= 12) {\r\n            gradeNumbers.push(i);\r\n          }\r\n        }\r\n      } else {\r\n        // Handle single grade like \"Grade 1\"\r\n        const gradeNum = parseInt(part.replace(/\\D/g, ''));\r\n        if (gradeNum >= 1 && gradeNum <= 12) {\r\n          gradeNumbers.push(gradeNum);\r\n        }\r\n      }\r\n    });\r\n    \r\n    return [...new Set(gradeNumbers)].sort((a, b) => a - b);\r\n  }, []);\r\n\r\n  // Format array of grade numbers to string\r\n  const formatGradeNumbersToString = useCallback((gradeNumbers, useVietnamese = false) => {\r\n    if (!gradeNumbers || gradeNumbers.length === 0) return '';\r\n    \r\n    const sortedGrades = [...gradeNumbers].sort((a, b) => a - b);\r\n    const gradeNames = sortedGrades.map(num => \r\n      useVietnamese ? \r\n        getVietnameseGradeNameByNumber(num) : \r\n        getGradeNameByNumber(num)\r\n    );\r\n    \r\n    return gradeNames.join(', ');\r\n  }, [getGradeNameByNumber, getVietnameseGradeNameByNumber]);\r\n\r\n  return {\r\n    gradeLevels,\r\n    gradeOptions,\r\n    loading,\r\n    error,\r\n    \r\n    // Utility functions\r\n    getGradeNumber,\r\n    getGradeNameByNumber,\r\n    getVietnameseGradeNameByNumber,\r\n    getGradeSelectOptions,\r\n    getGradeSelectOptionsByName,\r\n    getMultipleGradeOptions,\r\n    formatGradeRange,\r\n    parseGradeLevelsString,\r\n    formatGradeNumbersToString,\r\n    \r\n    // Refresh function\r\n    refetch: fetchGradeLevels\r\n  };\r\n};\r\n\r\nexport default useGradeLevels;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}