{"ast":null,"code":"import axios from'axios';const API_URL='/api';// Set to /api so all requests automatically get the /api prefix\n// Helper function to get the auth token from localStorage\nconst getAuthToken=()=>{return localStorage.getItem('token');// Or however you store your token\n};// Axios instance with default settings\nconst apiClient=axios.create({baseURL:API_URL});apiClient.interceptors.request.use(config=>{const token=getAuthToken();if(token){config.headers['Authorization']=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// Generic error handler\nconst handleApiError=(error,context)=>{// Extract detailed error information\nif(error.response){// The request was made and the server responded with a status code outside of 2xx\nif(error.response.data&&error.response.data.message){throw new Error(error.response.data.message);}else if(error.response.data&&error.response.data.errors){// Handle validation errors from Spring Boot\nconst validationErrors=Object.values(error.response.data.errors).join(', ');throw new Error(`Validation error: ${validationErrors}`);}else if(error.response.status===400){throw new Error(`Bad request: The server could not understand the request. Please check your input data.`);}else if(error.response.status===401){throw new Error(`Authentication failed: Please log in again.`);}else if(error.response.status===403){throw new Error(`Access denied: You don't have permission to perform this action.`);}else if(error.response.status===500){throw new Error(`Server error: An internal server error occurred. Please try again later.`);}}else if(error.request){// The request was made but no response was received\nthrow new Error(`Network error: No response received from server. Please check your connection.`);}else{// Something happened in setting up the request\nthrow new Error(`Request setup error: ${error.message}`);}throw new Error(`Failed to ${context}. Please try again.`);};// Health Event APIs\nexport const getAllHealthEvents=async()=>{try{const response=await apiClient.get('/health-events');return response.data;}catch(error){handleApiError(error,'fetch health events');}};export const getHealthEventById=async eventId=>{try{const response=await apiClient.get(`/health-events/${eventId}`);return response.data;}catch(error){handleApiError(error,'fetch health event by ID');}};export const createHealthEvent=async eventData=>{try{const response=await apiClient.post('/health-events',eventData);return response.data;}catch(error){handleApiError(error,'create health event');}};export const updateHealthEvent=async(eventId,eventData)=>{try{const response=await apiClient.put(`/health-events/${eventId}`,eventData);return response.data;}catch(error){handleApiError(error,'update health event');}};export const deleteHealthEvent=async eventId=>{try{const response=await apiClient.delete(`/health-events/${eventId}`);return response.data;// Or handle no content response\n}catch(error){handleApiError(error,'delete health event');}};// Legacy API function names for backward compatibility\nexport const getAllHealthCheckupEvents=getAllHealthEvents;export const getHealthCheckupEventById=getHealthEventById;export const createHealthCheckupEvent=createHealthEvent;export const updateHealthCheckupEvent=updateHealthEvent;export const deleteHealthCheckupEvent=deleteHealthEvent;// Grade Level APIs\nexport const getAllGradeLevels=async()=>{try{const response=await apiClient.get('/grade-levels');return response.data;}catch(error){handleApiError(error,'fetch grade levels');}};// Vaccine APIs\nexport const getAllVaccines=async()=>{try{const response=await apiClient.get('/vaccines');return response.data;}catch(error){handleApiError(error,'fetch vaccines');}};// Checkup Type APIs\nexport const getAllCheckupTypes=async()=>{try{const response=await apiClient.get('/health-checkup-types');return response.data;}catch(error){handleApiError(error,'fetch checkup types');}};// Student Health Checkup APIs\nexport const getStudentHealthCheckupsByEventId=async eventId=>{try{const response=await apiClient.get(`/health-checkup-records/event/${eventId}`);return response.data;}catch(error){handleApiError(error,'fetch student health checkups by event ID');}};export const getStudentHealthCheckupsByStudentId=async studentId=>{try{const response=await apiClient.get(`/health-checkup-records/student/${studentId}`);return response.data;}catch(error){handleApiError(error,'fetch student health checkups by student ID');}};export const createStudentHealthCheckup=async checkupData=>{try{const response=await apiClient.post('/health-checkup-records',checkupData);return response.data;}catch(error){handleApiError(error,'create student health checkup');}};export const updateStudentHealthCheckup=async(checkupId,checkupData)=>{try{const response=await apiClient.put(`/health-checkup-records/${checkupId}`,checkupData);return response.data;}catch(error){handleApiError(error,'update student health checkup');}};// Note: This consent endpoint may not be needed for health checkups\n// export const recordStudentHealthCheckupConsent = async (studentId, eventId, consent) => {\n//   try {\n//     const response = await apiClient.post(`/health-checkup-records/event/${eventId}/student/${studentId}/consent`, { consent });\n//     return response.data;\n//   } catch (error) {\n//     handleApiError(error, 'record student health checkup consent');\n//   }\n// };\nexport const getStudentHealthCheckupById=async checkupRecordId=>{try{const response=await apiClient.get(`/health-checkup-records/${checkupRecordId}`);return response.data;}catch(error){handleApiError(error,'fetch student health checkup by ID');}};// If you need to delete a student health checkup record:\n// export const deleteStudentHealthCheckup = async (checkupId) => {\n//   try {\n//     const response = await apiClient.delete(`/student-health-checkups/${checkupId}`);\n//     return response.data;\n//   } catch (error) {\n//     handleApiError(error, 'delete student health checkup');\n//   }\n// };\n// User/Student APIs (assuming a general user/student endpoint)\nexport const getAllStudents=async()=>{try{const response=await apiClient.get('/students');return response.data;}catch(error){handleApiError(error,'fetch all students');}};// For admin/nurse access with full permissions\nexport const getAllStudentsAdmin=async()=>{try{const response=await apiClient.get('/students');return response.data;}catch(error){handleApiError(error,'fetch all students (admin)');}};// Get all students with their health data combined\nexport const getAllStudentsWithHealthData=async()=>{try{const[students,healthDeclarations]=await Promise.all([getAllStudents(),// Try the nurse endpoint as backup since main endpoint might not be loaded yet\napiClient.get('/nurse/health-declarations').catch(()=>apiClient.get('/health-declarations').catch(()=>({data:[]})))]);// Combine students with their health data and medical events\nconst studentsWithHealth=await Promise.all(students.map(async student=>{const healthData=healthDeclarations.data.find(declaration=>declaration.studentCode===student.studentCode||declaration.studentCode===student.username);// Fetch medical events for this student\nlet medicalEvents=[];try{medicalEvents=await getMedicalEventsByStudent(student.studentCode);}catch(error){}return{...student,healthData:healthData||null,healthDeclaration:healthData||null,hasHealthDeclaration:!!healthData,medicalEvents:medicalEvents||[]};}));return studentsWithHealth;}catch(error){handleApiError(error,'fetch students with health data');}};// Get health declaration by student code\nexport const getHealthDeclarationByStudentCode=async studentCode=>{try{const response=await apiClient.get(`/health-declarations/student/${studentCode}`);return response.data;}catch(error){var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===404){return null;// No health declaration found\n}handleApiError(error,'fetch health declaration by student code');}};// Nurse edit health declaration\nexport const nurseEditHealthDeclaration=async(studentCode,healthData)=>{try{const response=await apiClient.post(`/health-declarations/student/${studentCode}/update`,healthData);return response.data;}catch(error){handleApiError(error,'update health declaration');}};// User Profile APIs\nexport const getUserProfile=async()=>{try{const response=await apiClient.get('/auth/user/profile');return response.data;}catch(error){handleApiError(error,'fetch user profile');}};// Add other API functions here as needed for other features (Medication, Vaccination, etc.)\n// Grade Level APIs\nexport const getAllActiveGradeLevels=async()=>{try{const response=await apiClient.get('/grade-levels/for-selection');return response.data;}catch(error){handleApiError(error,'fetch active grade levels');}};export const getGradeLevelById=async gradeId=>{try{const response=await apiClient.get(`/grade-levels/${gradeId}`);return response.data;}catch(error){handleApiError(error,'fetch grade level by ID');}};export const getGradeLevelByNumber=async gradeNumber=>{try{const response=await apiClient.get(`/grade-levels/number/${gradeNumber}`);return response.data;}catch(error){handleApiError(error,'fetch grade level by number');}};export const getGradeLevelsByRange=async(minGrade,maxGrade)=>{try{const response=await apiClient.get(`/grade-levels/range?minGrade=${minGrade}&maxGrade=${maxGrade}`);return response.data;}catch(error){handleApiError(error,'fetch grade levels by range');}};export const getGradeLevelsByAge=async age=>{try{const response=await apiClient.get(`/grade-levels/age/${age}`);return response.data;}catch(error){handleApiError(error,'fetch grade levels by age');}};export const getGradeDisplayOptions=async()=>{try{const response=await apiClient.get('/grade-levels/display-options');return response.data;}catch(error){handleApiError(error,'fetch grade display options');}};export const createGradeLevel=async gradeLevelData=>{try{const response=await apiClient.post('/grade-levels',gradeLevelData);return response.data;}catch(error){handleApiError(error,'create grade level');}};export const updateGradeLevel=async(gradeId,gradeLevelData)=>{try{const response=await apiClient.put(`/grade-levels/${gradeId}`,gradeLevelData);return response.data;}catch(error){handleApiError(error,'update grade level');}};export const deleteGradeLevel=async gradeId=>{try{const response=await apiClient.delete(`/grade-levels/${gradeId}`);return response.data;}catch(error){handleApiError(error,'delete grade level');}};export const initializeStandardGradeLevels=async()=>{try{const response=await apiClient.post('/grade-levels/initialize');return response.data;}catch(error){handleApiError(error,'initialize standard grade levels');}};// Vaccination Consent APIs\nexport const getPendingVaccinationConsents=async studentCode=>{try{const response=await apiClient.get(`/parent/vaccination-consent/student/${studentCode}/pending`);return response.data;}catch(error){handleApiError(error,'fetch pending vaccination consents');}};export const getSubmittedVaccinationConsents=async studentCode=>{try{const response=await apiClient.get(`/parent/vaccination-consent/student/${studentCode}/submitted`);return response.data;}catch(error){handleApiError(error,'fetch submitted vaccination consents');}};export const submitVaccinationConsent=async(consentId,consentData)=>{try{const response=await apiClient.post(`/parent/vaccination-consent/${consentId}/respond`,{status:consentData.consentStatus,notes:consentData.parentNotes||''});return response.data;}catch(error){handleApiError(error,'submit vaccination consent');}};export const getStudentVaccinationInfo=async studentId=>{try{const response=await apiClient.get(`/students/${studentId}`);return response.data;}catch(error){handleApiError(error,'fetch student vaccination info');}};// Get parent's children (students)\nexport const getParentStudents=async()=>{try{const response=await apiClient.get('/parent/students');return response.data;}catch(error){handleApiError(error,'fetch parent students');}};// Vaccination Management APIs for Nurses/Admins\nexport const sendVaccinationConsents=async eventId=>{try{const response=await apiClient.post(`/vaccination-management/event/${eventId}/send-consents`);return response.data;}catch(error){handleApiError(error,'send vaccination consents');}};export const getVaccinationEventConsents=async eventId=>{try{const response=await apiClient.get(`/vaccination-management/event/${eventId}/consents`);return response.data;}catch(error){handleApiError(error,'fetch vaccination event consents');}};export const getVaccinationRecords=async eventId=>{try{const response=await apiClient.get(`/vaccination-management/event/${eventId}/records`);return response.data;}catch(error){handleApiError(error,'fetch vaccination records');}};export const createVaccinationRecord=async recordData=>{try{const response=await apiClient.post('/vaccination-management/records',recordData);return response.data;}catch(error){handleApiError(error,'create vaccination record');}};export const updateVaccinationRecord=async(recordId,recordData)=>{try{const response=await apiClient.put(`/vaccination-management/record/${recordId}`,recordData);return response.data;}catch(error){handleApiError(error,'update vaccination record');}};// Delete vaccination record\nexport const deleteVaccinationRecord=async recordId=>{try{const response=await apiClient.delete(`/vaccination-management/record/${recordId}`);return response.data;}catch(error){handleApiError(error,'delete vaccination record');}};// Get all vaccination records for vaccination management\nexport const getAllVaccinationRecords=async()=>{try{const response=await apiClient.get('/vaccination-management/records');return response.data;}catch(error){handleApiError(error,'fetch all vaccination records');}};// Get vaccination statistics/summary\nexport const getVaccinationStatistics=async()=>{try{const response=await apiClient.get('/vaccination-management/statistics');return response.data;}catch(error){handleApiError(error,'fetch vaccination statistics');}};// Get vaccination records by status\nexport const getVaccinationRecordsByStatus=async status=>{try{const response=await apiClient.get(`/vaccination-management/records?status=${status}`);return response.data;}catch(error){handleApiError(error,'fetch vaccination records by status');}};// Health Event APIs for parents\nexport const getUpcomingHealthEventsForStudent=async studentCode=>{try{const response=await apiClient.get(`/health-events/upcoming/student/${studentCode}`);return response.data;}catch(error){handleApiError(error,'fetch upcoming health events for student');}};// Get vaccination history for a student (for parents to view results)\nexport const getStudentVaccinationHistory=async studentCode=>{try{const response=await apiClient.get(`/vaccination-management/student/${studentCode}/history`);return response.data;}catch(error){handleApiError(error,'fetch student vaccination history');}};// Health Checkup Record APIs\nexport const getAllHealthCheckupRecords=async()=>{try{const response=await apiClient.get('/health-checkup-records');return response.data;}catch(error){handleApiError(error,'fetch all health checkup records');}};export const getHealthCheckupRecordById=async checkupId=>{try{const response=await apiClient.get(`/health-checkup-records/${checkupId}`);return response.data;}catch(error){handleApiError(error,'fetch health checkup record by ID');}};export const getHealthCheckupRecordsByStudent=async studentId=>{try{const response=await apiClient.get(`/health-checkup-records/student/${studentId}`);return response.data;}catch(error){handleApiError(error,'fetch health checkup records by student');}};export const getHealthCheckupRecordsByEvent=async eventId=>{try{const response=await apiClient.get(`/health-checkup-records/event/${eventId}`);return response.data;}catch(error){handleApiError(error,'fetch health checkup records by event');}};export const createHealthCheckupRecord=async checkupData=>{try{const response=await apiClient.post('/health-checkup-records',checkupData);return response.data;}catch(error){handleApiError(error,'create health checkup record');}};export const updateHealthCheckupRecord=async(checkupId,checkupData)=>{try{const response=await apiClient.put(`/health-checkup-records/${checkupId}`,checkupData);return response.data;}catch(error){handleApiError(error,'update health checkup record');}};export const deleteHealthCheckupRecord=async checkupId=>{try{const response=await apiClient.delete(`/health-checkup-records/${checkupId}`);return response.data;}catch(error){handleApiError(error,'delete health checkup record');}};export const getHealthCheckupStatistics=async()=>{try{const response=await apiClient.get('/health-checkup-records/statistics');return response.data;}catch(error){handleApiError(error,'fetch health checkup statistics');}};export const getHealthCheckupRecordsByStatus=async status=>{try{const response=await apiClient.get(`/health-checkup-records?status=${status}`);return response.data;}catch(error){handleApiError(error,'fetch health checkup records by status');}};// Nurses Management APIs\nexport const getAllNurses=async()=>{try{const response=await apiClient.get('/nurses');return response.data;}catch(error){handleApiError(error,'fetch nurses');}};// Health Checkup Types APIs\nexport const getAllHealthCheckupTypes=async()=>{try{const response=await apiClient.get('/health-checkup-types');return response.data;}catch(error){handleApiError(error,'fetch health checkup types');}};export const getHealthCheckupTypeById=async typeId=>{try{const response=await apiClient.get(`/health-checkup-types/${typeId}`);return response.data;}catch(error){handleApiError(error,'fetch health checkup type by ID');}};export const searchHealthCheckupTypes=async searchTerm=>{try{const response=await apiClient.get(`/health-checkup-types/search?term=${encodeURIComponent(searchTerm)}`);return response.data;}catch(error){handleApiError(error,'search health checkup types');}};export const createHealthCheckupType=async typeData=>{try{const response=await apiClient.post('/health-checkup-types',typeData);return response.data;}catch(error){handleApiError(error,'create health checkup type');}};export const updateHealthCheckupType=async(typeId,typeData)=>{try{const response=await apiClient.put(`/health-checkup-types/${typeId}`,typeData);return response.data;}catch(error){handleApiError(error,'update health checkup type');}};export const deleteHealthCheckupType=async typeId=>{try{const response=await apiClient.delete(`/health-checkup-types/${typeId}`);return response.data;}catch(error){handleApiError(error,'delete health checkup type');}};// ADMIN APIS - Simple admin functionality\n// ========================================\n// Admin User Management APIs - Using existing student/nurse data\nexport const getAllUsers=async()=>{try{// Get all users from existing endpoints\nconst[students,nurses]=await Promise.all([getAllStudents(),getAllNurses()]);// Generate phone numbers for demo purposes\nconst generatePhoneNumber=index=>{const baseNumber=900000000;return`+84 ${Math.floor((baseNumber+index)/1000000)} ${Math.floor((baseNumber+index)%1000000/1000)} ${(baseNumber+index)%1000}`;};// Combine and format as user data\nconst users=[...(students||[]).map((student,index)=>{var _student$gradeLevel,_student$gradeLevel2;return{id:student.id||student.studentCode,username:student.studentCode||student.username,fullName:student.name||student.fullName,email:student.email||`${student.studentCode||'student'}@school.edu`,phone:student.phoneNumber||student.phone||generatePhoneNumber(index+100),role:'STUDENT',status:student.status||'active',lastLogin:student.lastLogin||null,createdAt:student.createdAt||new Date().toISOString(),grade:student.grade||((_student$gradeLevel=student.gradeLevel)===null||_student$gradeLevel===void 0?void 0:_student$gradeLevel.gradeName),className:student.className||student.grade||((_student$gradeLevel2=student.gradeLevel)===null||_student$gradeLevel2===void 0?void 0:_student$gradeLevel2.gradeName)};}),...(nurses||[]).map((nurse,index)=>({id:nurse.id||nurse.nurseId,username:nurse.nurseCode||nurse.username,fullName:nurse.fullName||nurse.name,email:nurse.email||`${nurse.nurseCode||'nurse'}@school.edu`,phone:nurse.phoneNumber||nurse.phone||generatePhoneNumber(index+200),role:'NURSE',status:nurse.status||'active',lastLogin:nurse.lastLogin||null,createdAt:nurse.createdAt||new Date().toISOString(),qualification:nurse.qualification,specialization:nurse.specialization,department:nurse.department||'Medical'}))];// Add additional mock users if we have less than 11 users to match requirements\nconst additionalUsers=[];const currentUserCount=users.length;if(currentUserCount<11){const mockUsers=[{id:'ADMIN001',username:'admin001',fullName:'System Administrator',email:'admin@fptjunior.edu.vn',phone:'+84 901 234 567',role:'ADMIN',status:'active',lastLogin:new Date(Date.now()-1000*60*30).toISOString(),createdAt:new Date(Date.now()-1000*60*60*24*30).toISOString()},{id:'PAR001',username:'parent001',fullName:'Nguyen Van Duc',email:'nvduc@gmail.com',phone:'+84 903 456 789',role:'PARENT',status:'active',lastLogin:new Date(Date.now()-1000*60*60*2).toISOString(),createdAt:new Date(Date.now()-1000*60*60*24*15).toISOString(),studentName:'Nguyen Minh Khai'},{id:'PAR002',username:'parent002',fullName:'Tran Thi Hoa',email:'tthoa@gmail.com',phone:'+84 904 567 890',role:'PARENT',status:'active',lastLogin:new Date(Date.now()-1000*60*60*1).toISOString(),createdAt:new Date(Date.now()-1000*60*60*24*18).toISOString(),studentName:'Tran Thi Lan'},{id:'PAR003',username:'parent003',fullName:'Le Quang Minh',email:'lqminh@gmail.com',phone:'+84 905 678 901',role:'PARENT',status:'active',lastLogin:new Date(Date.now()-1000*60*60*3).toISOString(),createdAt:new Date(Date.now()-1000*60*60*24*12).toISOString(),studentName:'Le Van Nam'},{id:'PAR004',username:'parent004',fullName:'Pham Van Long',email:'pvlong@gmail.com',phone:'+84 906 789 012',role:'PARENT',status:'inactive',lastLogin:new Date(Date.now()-1000*60*60*24*7).toISOString(),createdAt:new Date(Date.now()-1000*60*60*24*20).toISOString(),studentName:'Pham Thi Mai'}];// Add as many mock users as needed to reach 11 total\nconst usersToAdd=Math.min(mockUsers.length,11-currentUserCount);additionalUsers.push(...mockUsers.slice(0,usersToAdd));}return[...users,...additionalUsers];}catch(error){handleApiError(error,'fetch all users for admin');}};// Update user information\nexport const updateUser=async(userId,userData)=>{try{const response=await apiClient.put(`/admin/users/${userId}`,userData);return response.data;}catch(error){handleApiError(error,'update user');}};// Delete user\nexport const deleteUser=async userId=>{try{const response=await apiClient.delete(`/admin/users/${userId}`);return response.data;}catch(error){handleApiError(error,'delete user');}};// Activate user\nexport const activateUser=async userId=>{try{const response=await apiClient.put(`/admin/users/${userId}/activate`);return response.data;}catch(error){handleApiError(error,'activate user');}};// Deactivate user\nexport const deactivateUser=async userId=>{try{const response=await apiClient.put(`/admin/users/${userId}/deactivate`);return response.data;}catch(error){handleApiError(error,'deactivate user');}};// Admin Dashboard Statistics - Using real backend data\nexport const getAdminDashboardStats=async()=>{try{const response=await apiClient.get('/admin/dashboard/stats');return response.data;}catch(error){return{quickStats:{totalUsers:0,totalStudents:0,activeNurses:0,pendingRequests:0},recentActivities:[]};}};// Get system reports with real data\nexport const getSystemReports=async function(){let reportType=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'overview';let startDate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let endDate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;try{const params=new URLSearchParams();if(reportType)params.append('reportType',reportType);if(startDate)params.append('startDate',startDate);if(endDate)params.append('endDate',endDate);const response=await apiClient.get(`/admin/reports?${params.toString()}`);return response.data;}catch(error){handleApiError(error,'fetch system reports');}};// Data Export Functions for Backup\nexport const exportStudents=async()=>{try{const response=await getAllStudentsAdmin();// Format the data properly for CSV export\nconst formattedData=(response||[]).map(student=>{var _student$class;const exportData={studentCode:student.studentCode||'',fullName:student.fullName||'',dateOfBirth:student.dateOfBirth?new Date(student.dateOfBirth).toLocaleDateString('en-US'):'',gender:student.gender||'',classGradeLevel:student.classGradeLevel||student.gradeLevel||'',className:student.className||((_student$class=student.class)===null||_student$class===void 0?void 0:_student$class.name)||'',schoolYear:student.schoolYear||'2024-2025',medicalConditions:student.medicalConditions||'No allergies',medicationAllergies:student.medicationAllergies||'No medication allergies'};// Only add emergencyContact and emergencyPhone if they exist\nif(student.emergencyContact){if(typeof student.emergencyContact==='object'){if(student.emergencyContact.name){exportData.emergencyContactName=student.emergencyContact.name;}if(student.emergencyContact.phone){exportData.emergencyContactPhone=student.emergencyContact.phone;}}else{exportData.emergencyContact=student.emergencyContact;}}if(student.emergencyPhone&&!exportData.emergencyContactPhone){exportData.emergencyPhone=student.emergencyPhone;}// Only add parentId and parentName if they exist\nif(student.parentId){exportData.parentId=student.parentId;}if(student.parentName){exportData.parentName=student.parentName;}return exportData;});return formattedData;}catch(error){handleApiError(error,'export students data');return[];}};export const exportHealthEvents=async()=>{try{const response=await getAllHealthEvents();return response||[];}catch(error){handleApiError(error,'export health events data');return[];}};export const exportUsers=async()=>{try{const response=await getAllUsers();// Format the data properly for CSV export (remove grade and className for users)\nconst formattedData=(response||[]).map(user=>({id:user.id||'',username:user.username||'',fullName:user.fullName||'',email:user.email||'',phone:user.phone||'',role:user.role||(user.roles&&user.roles.length>0?user.roles[0]:''),status:user.status||'',lastLogin:user.lastLogin?new Date(user.lastLogin).toLocaleDateString('en-US'):'',createdAt:user.createdAt?new Date(user.createdAt).toLocaleDateString('en-US'):''// Don't include grade and className for users table\n}));return formattedData;}catch(error){handleApiError(error,'export users data');return[];}};export const exportHealthCheckups=async()=>{try{// Use getAllStudentsWithHealthData to get checkup records\nconst response=await getAllStudentsWithHealthData();// Extract health checkup data from students\nconst healthCheckups=[];if(Array.isArray(response)){response.forEach(student=>{if(student.healthCheckups&&Array.isArray(student.healthCheckups)){student.healthCheckups.forEach(checkup=>{healthCheckups.push({...checkup,studentName:student.fullName,studentCode:student.studentCode,gradeLevel:student.gradeLevel});});}});}return healthCheckups||[];}catch(error){handleApiError(error,'export health checkups data');return[];}};// Student API functions\nexport const getStudentHealthProfile=async()=>{try{const response=await apiClient.get('/student/health-profile');return response.data;}catch(error){handleApiError(error,'fetch student health profile');}};export const getStudentMedicalHistory=async()=>{try{const response=await apiClient.get('/student/medical-history');return response.data;}catch(error){handleApiError(error,'fetch student medical history');}};export const getStudentVaccinationRecords=async()=>{try{const response=await apiClient.get('/student/vaccination-records');return response.data;}catch(error){handleApiError(error,'fetch student vaccination records');}};// Student Dashboard\nexport const getStudentDashboard=async()=>{try{const response=await apiClient.get('/student/dashboard');return response.data;}catch(error){// Return default data if dashboard endpoint is not available\nreturn{studentCode:'N/A',fullName:'Student',email:'',quickStats:{totalAppointments:0,pendingVaccinations:0,healthDeclarations:0,unreadNotifications:0},recentActivities:[],healthProfile:{hasData:false,message:'No health profile available'},upcomingEvents:[],medicalHistory:[]};}};// Document Download APIs\nexport const downloadHealthDocument=async documentType=>{try{const response=await apiClient.get(`/documents/${documentType}`,{responseType:'blob'});return response.data;}catch(error){handleApiError(error,'download health document');}};export const generateHealthDocumentPDF=async(documentType,documentData)=>{try{const response=await apiClient.post(`/documents/generate/${documentType}`,documentData,{responseType:'blob'});return response.data;}catch(error){handleApiError(error,'generate health document PDF');}};// Notification APIs - Disabled (functionality removed from project)\nexport const getUserNotifications=async()=>{// Notification functionality removed from project\nreturn[];};export const markNotificationAsRead=async notificationId=>{// Notification functionality removed from project\nreturn{success:true};};export const markAllNotificationsAsRead=async()=>{// Notification functionality removed from project\nreturn{success:true};};// Get medical events by student code\nexport const getMedicalEventsByStudent=async studentCode=>{try{const response=await apiClient.get(`/medical-events/student/${studentCode}`);return response.data;}catch(error){var _error$response2;if(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===404){return[];// No medical events found\n}handleApiError(error,'fetch medical events by student');return[];}};export{apiClient};export default apiClient;","map":{"version":3,"names":["axios","API_URL","getAuthToken","localStorage","getItem","apiClient","create","baseURL","interceptors","request","use","config","token","headers","error","Promise","reject","handleApiError","context","response","data","message","Error","errors","validationErrors","Object","values","join","status","getAllHealthEvents","get","getHealthEventById","eventId","createHealthEvent","eventData","post","updateHealthEvent","put","deleteHealthEvent","delete","getAllHealthCheckupEvents","getHealthCheckupEventById","createHealthCheckupEvent","updateHealthCheckupEvent","deleteHealthCheckupEvent","getAllGradeLevels","getAllVaccines","getAllCheckupTypes","getStudentHealthCheckupsByEventId","getStudentHealthCheckupsByStudentId","studentId","createStudentHealthCheckup","checkupData","updateStudentHealthCheckup","checkupId","getStudentHealthCheckupById","checkupRecordId","getAllStudents","getAllStudentsAdmin","getAllStudentsWithHealthData","students","healthDeclarations","all","catch","studentsWithHealth","map","student","healthData","find","declaration","studentCode","username","medicalEvents","getMedicalEventsByStudent","healthDeclaration","hasHealthDeclaration","getHealthDeclarationByStudentCode","_error$response","nurseEditHealthDeclaration","getUserProfile","getAllActiveGradeLevels","getGradeLevelById","gradeId","getGradeLevelByNumber","gradeNumber","getGradeLevelsByRange","minGrade","maxGrade","getGradeLevelsByAge","age","getGradeDisplayOptions","createGradeLevel","gradeLevelData","updateGradeLevel","deleteGradeLevel","initializeStandardGradeLevels","getPendingVaccinationConsents","getSubmittedVaccinationConsents","submitVaccinationConsent","consentId","consentData","consentStatus","notes","parentNotes","getStudentVaccinationInfo","getParentStudents","sendVaccinationConsents","getVaccinationEventConsents","getVaccinationRecords","createVaccinationRecord","recordData","updateVaccinationRecord","recordId","deleteVaccinationRecord","getAllVaccinationRecords","getVaccinationStatistics","getVaccinationRecordsByStatus","getUpcomingHealthEventsForStudent","getStudentVaccinationHistory","getAllHealthCheckupRecords","getHealthCheckupRecordById","getHealthCheckupRecordsByStudent","getHealthCheckupRecordsByEvent","createHealthCheckupRecord","updateHealthCheckupRecord","deleteHealthCheckupRecord","getHealthCheckupStatistics","getHealthCheckupRecordsByStatus","getAllNurses","getAllHealthCheckupTypes","getHealthCheckupTypeById","typeId","searchHealthCheckupTypes","searchTerm","encodeURIComponent","createHealthCheckupType","typeData","updateHealthCheckupType","deleteHealthCheckupType","getAllUsers","nurses","generatePhoneNumber","index","baseNumber","Math","floor","users","_student$gradeLevel","_student$gradeLevel2","id","fullName","name","email","phone","phoneNumber","role","lastLogin","createdAt","Date","toISOString","grade","gradeLevel","gradeName","className","nurse","nurseId","nurseCode","qualification","specialization","department","additionalUsers","currentUserCount","length","mockUsers","now","studentName","usersToAdd","min","push","slice","updateUser","userId","userData","deleteUser","activateUser","deactivateUser","getAdminDashboardStats","quickStats","totalUsers","totalStudents","activeNurses","pendingRequests","recentActivities","getSystemReports","reportType","arguments","undefined","startDate","endDate","params","URLSearchParams","append","toString","exportStudents","formattedData","_student$class","exportData","dateOfBirth","toLocaleDateString","gender","classGradeLevel","class","schoolYear","medicalConditions","medicationAllergies","emergencyContact","emergencyContactName","emergencyContactPhone","emergencyPhone","parentId","parentName","exportHealthEvents","exportUsers","user","roles","exportHealthCheckups","healthCheckups","Array","isArray","forEach","checkup","getStudentHealthProfile","getStudentMedicalHistory","getStudentVaccinationRecords","getStudentDashboard","totalAppointments","pendingVaccinations","unreadNotifications","healthProfile","hasData","upcomingEvents","medicalHistory","downloadHealthDocument","documentType","responseType","generateHealthDocumentPDF","documentData","getUserNotifications","markNotificationAsRead","notificationId","success","markAllNotificationsAsRead","_error$response2"],"sources":["C:/Users/trand/OneDrive/Documents/GitHub/SchoolMedicalManagement/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = '/api'; // Set to /api so all requests automatically get the /api prefix\r\n\r\n// Helper function to get the auth token from localStorage\r\nconst getAuthToken = () => {\r\n  return localStorage.getItem('token'); // Or however you store your token\r\n};\r\n\r\n// Axios instance with default settings\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = getAuthToken();\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Generic error handler\r\nconst handleApiError = (error, context) => {\r\n  // Extract detailed error information\r\n  if (error.response) {\r\n    // The request was made and the server responded with a status code outside of 2xx\r\n    if (error.response.data && error.response.data.message) {\r\n      throw new Error(error.response.data.message);\r\n    } else if (error.response.data && error.response.data.errors) {\r\n      // Handle validation errors from Spring Boot\r\n      const validationErrors = Object.values(error.response.data.errors).join(', ');\r\n      throw new Error(`Validation error: ${validationErrors}`);\r\n    } else if (error.response.status === 400) {\r\n      throw new Error(`Bad request: The server could not understand the request. Please check your input data.`);\r\n    } else if (error.response.status === 401) {\r\n      throw new Error(`Authentication failed: Please log in again.`);\r\n    } else if (error.response.status === 403) {\r\n      throw new Error(`Access denied: You don't have permission to perform this action.`);\r\n    } else if (error.response.status === 500) {\r\n      throw new Error(`Server error: An internal server error occurred. Please try again later.`);\r\n    }\r\n  } else if (error.request) {\r\n    // The request was made but no response was received\r\n    throw new Error(`Network error: No response received from server. Please check your connection.`);\r\n  } else {\r\n    // Something happened in setting up the request\r\n    throw new Error(`Request setup error: ${error.message}`);\r\n  }\r\n  \r\n  throw new Error(`Failed to ${context}. Please try again.`);\r\n};\r\n\r\n// Health Event APIs\r\nexport const getAllHealthEvents = async () => {\r\n  try {\r\n    const response = await apiClient.get('/health-events');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch health events');\r\n  }\r\n};\r\n\r\nexport const getHealthEventById = async (eventId) => {\r\n  try {\r\n    const response = await apiClient.get(`/health-events/${eventId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch health event by ID');\r\n  }\r\n};\r\n\r\nexport const createHealthEvent = async (eventData) => {\r\n  try {\r\n    const response = await apiClient.post('/health-events', eventData);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'create health event');\r\n  }\r\n};\r\n\r\nexport const updateHealthEvent = async (eventId, eventData) => {\r\n  try {\r\n    const response = await apiClient.put(`/health-events/${eventId}`, eventData);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'update health event');\r\n  }\r\n};\r\n\r\nexport const deleteHealthEvent = async (eventId) => {\r\n  try {\r\n    const response = await apiClient.delete(`/health-events/${eventId}`);\r\n    return response.data; // Or handle no content response\r\n  } catch (error) {\r\n    \r\n    handleApiError(error, 'delete health event');\r\n  }\r\n};\r\n\r\n// Legacy API function names for backward compatibility\r\nexport const getAllHealthCheckupEvents = getAllHealthEvents;\r\nexport const getHealthCheckupEventById = getHealthEventById;\r\nexport const createHealthCheckupEvent = createHealthEvent;\r\nexport const updateHealthCheckupEvent = updateHealthEvent;\r\nexport const deleteHealthCheckupEvent = deleteHealthEvent;\r\n\r\n// Grade Level APIs\r\nexport const getAllGradeLevels = async () => {\r\n  try {\r\n    const response = await apiClient.get('/grade-levels');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch grade levels');\r\n  }\r\n};\r\n\r\n// Vaccine APIs\r\nexport const getAllVaccines = async () => {\r\n  try {\r\n    const response = await apiClient.get('/vaccines');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch vaccines');\r\n  }\r\n};\r\n\r\n// Checkup Type APIs\r\nexport const getAllCheckupTypes = async () => {\r\n  try {\r\n    const response = await apiClient.get('/health-checkup-types');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch checkup types');\r\n  }\r\n};\r\n\r\n// Student Health Checkup APIs\r\nexport const getStudentHealthCheckupsByEventId = async (eventId) => {\r\n  try {\r\n    const response = await apiClient.get(`/health-checkup-records/event/${eventId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch student health checkups by event ID');\r\n  }\r\n};\r\n\r\nexport const getStudentHealthCheckupsByStudentId = async (studentId) => {\r\n  try {\r\n    const response = await apiClient.get(`/health-checkup-records/student/${studentId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch student health checkups by student ID');\r\n  }\r\n};\r\n\r\nexport const createStudentHealthCheckup = async (checkupData) => {\r\n  try {\r\n    const response = await apiClient.post('/health-checkup-records', checkupData);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'create student health checkup');\r\n  }\r\n};\r\n\r\nexport const updateStudentHealthCheckup = async (checkupId, checkupData) => {\r\n  try {\r\n    const response = await apiClient.put(`/health-checkup-records/${checkupId}`, checkupData);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'update student health checkup');\r\n  }\r\n};\r\n\r\n// Note: This consent endpoint may not be needed for health checkups\r\n// export const recordStudentHealthCheckupConsent = async (studentId, eventId, consent) => {\r\n//   try {\r\n//     const response = await apiClient.post(`/health-checkup-records/event/${eventId}/student/${studentId}/consent`, { consent });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     handleApiError(error, 'record student health checkup consent');\r\n//   }\r\n// };\r\n\r\nexport const getStudentHealthCheckupById = async (checkupRecordId) => {\r\n  try {\r\n    const response = await apiClient.get(`/health-checkup-records/${checkupRecordId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch student health checkup by ID');\r\n  }\r\n};\r\n\r\n// If you need to delete a student health checkup record:\r\n// export const deleteStudentHealthCheckup = async (checkupId) => {\r\n//   try {\r\n//     const response = await apiClient.delete(`/student-health-checkups/${checkupId}`);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     handleApiError(error, 'delete student health checkup');\r\n//   }\r\n// };\r\n\r\n// User/Student APIs (assuming a general user/student endpoint)\r\nexport const getAllStudents = async () => {\r\n  try {\r\n    const response = await apiClient.get('/students');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch all students');\r\n  }\r\n};\r\n\r\n// For admin/nurse access with full permissions\r\nexport const getAllStudentsAdmin = async () => {\r\n  try {\r\n    const response = await apiClient.get('/students');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch all students (admin)');\r\n  }\r\n};\r\n\r\n// Get all students with their health data combined\r\nexport const getAllStudentsWithHealthData = async () => {\r\n  try {\r\n    const [students, healthDeclarations] = await Promise.all([\r\n      getAllStudents(),\r\n      // Try the nurse endpoint as backup since main endpoint might not be loaded yet\r\n      apiClient.get('/nurse/health-declarations').catch(() => \r\n        apiClient.get('/health-declarations').catch(() => ({ data: [] }))\r\n      )\r\n    ]);\r\n    \r\n    // Combine students with their health data and medical events\r\n    const studentsWithHealth = await Promise.all(students.map(async student => {\r\n      const healthData = healthDeclarations.data.find(\r\n        declaration => declaration.studentCode === student.studentCode || declaration.studentCode === student.username\r\n      );\r\n      \r\n      // Fetch medical events for this student\r\n      let medicalEvents = [];\r\n      try {\r\n        medicalEvents = await getMedicalEventsByStudent(student.studentCode);\r\n      } catch (error) {\r\n        }\r\n      \r\n      return {\r\n        ...student,\r\n        healthData: healthData || null,\r\n        healthDeclaration: healthData || null,\r\n        hasHealthDeclaration: !!healthData,\r\n        medicalEvents: medicalEvents || []\r\n      };\r\n    }));\r\n    \r\n    return studentsWithHealth;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch students with health data');\r\n  }\r\n};\r\n\r\n// Get health declaration by student code\r\nexport const getHealthDeclarationByStudentCode = async (studentCode) => {\r\n  try {\r\n    const response = await apiClient.get(`/health-declarations/student/${studentCode}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response?.status === 404) {\r\n      return null; // No health declaration found\r\n    }\r\n    handleApiError(error, 'fetch health declaration by student code');\r\n  }\r\n};\r\n\r\n// Nurse edit health declaration\r\nexport const nurseEditHealthDeclaration = async (studentCode, healthData) => {\r\n  try {\r\n    const response = await apiClient.post(`/health-declarations/student/${studentCode}/update`, healthData);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'update health declaration');\r\n  }\r\n};\r\n\r\n// User Profile APIs\r\nexport const getUserProfile = async () => {\r\n  try {\r\n    const response = await apiClient.get('/auth/user/profile');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch user profile');\r\n  }\r\n};\r\n\r\n// Add other API functions here as needed for other features (Medication, Vaccination, etc.)\r\n\r\n// Grade Level APIs\r\nexport const getAllActiveGradeLevels = async () => {\r\n  try {\r\n    const response = await apiClient.get('/grade-levels/for-selection');\r\n    return response.data;\r\n  } catch (error) {\r\n    \r\n    handleApiError(error, 'fetch active grade levels');\r\n  }\r\n};\r\n\r\nexport const getGradeLevelById = async (gradeId) => {\r\n  try {\r\n    const response = await apiClient.get(`/grade-levels/${gradeId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch grade level by ID');\r\n  }\r\n};\r\n\r\nexport const getGradeLevelByNumber = async (gradeNumber) => {\r\n  try {\r\n    const response = await apiClient.get(`/grade-levels/number/${gradeNumber}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch grade level by number');\r\n  }\r\n};\r\n\r\nexport const getGradeLevelsByRange = async (minGrade, maxGrade) => {\r\n  try {\r\n    const response = await apiClient.get(`/grade-levels/range?minGrade=${minGrade}&maxGrade=${maxGrade}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch grade levels by range');\r\n  }\r\n};\r\n\r\nexport const getGradeLevelsByAge = async (age) => {\r\n  try {\r\n    const response = await apiClient.get(`/grade-levels/age/${age}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch grade levels by age');\r\n  }\r\n};\r\n\r\nexport const getGradeDisplayOptions = async () => {\r\n  try {\r\n    const response = await apiClient.get('/grade-levels/display-options');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch grade display options');\r\n  }\r\n};\r\n\r\nexport const createGradeLevel = async (gradeLevelData) => {\r\n  try {\r\n    const response = await apiClient.post('/grade-levels', gradeLevelData);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'create grade level');\r\n  }\r\n};\r\n\r\nexport const updateGradeLevel = async (gradeId, gradeLevelData) => {\r\n  try {\r\n    const response = await apiClient.put(`/grade-levels/${gradeId}`, gradeLevelData);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'update grade level');\r\n  }\r\n};\r\n\r\nexport const deleteGradeLevel = async (gradeId) => {\r\n  try {\r\n    const response = await apiClient.delete(`/grade-levels/${gradeId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'delete grade level');\r\n  }\r\n};\r\n\r\nexport const initializeStandardGradeLevels = async () => {\r\n  try {\r\n    const response = await apiClient.post('/grade-levels/initialize');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'initialize standard grade levels');\r\n  }\r\n};\r\n\r\n// Vaccination Consent APIs\r\nexport const getPendingVaccinationConsents = async (studentCode) => {\r\n  try {\r\n    const response = await apiClient.get(`/parent/vaccination-consent/student/${studentCode}/pending`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch pending vaccination consents');\r\n  }\r\n};\r\n\r\nexport const getSubmittedVaccinationConsents = async (studentCode) => {\r\n  try {\r\n    const response = await apiClient.get(`/parent/vaccination-consent/student/${studentCode}/submitted`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch submitted vaccination consents');\r\n  }\r\n};\r\n\r\nexport const submitVaccinationConsent = async (consentId, consentData) => {\r\n  try {\r\n    const response = await apiClient.post(`/parent/vaccination-consent/${consentId}/respond`, {\r\n      status: consentData.consentStatus,\r\n      notes: consentData.parentNotes || ''\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'submit vaccination consent');\r\n  }\r\n};\r\n\r\nexport const getStudentVaccinationInfo = async (studentId) => {\r\n  try {\r\n    const response = await apiClient.get(`/students/${studentId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch student vaccination info');\r\n  }\r\n};\r\n\r\n// Get parent's children (students)\r\nexport const getParentStudents = async () => {\r\n  try {\r\n    const response = await apiClient.get('/parent/students');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch parent students');\r\n  }\r\n};\r\n\r\n// Vaccination Management APIs for Nurses/Admins\r\nexport const sendVaccinationConsents = async (eventId) => {\r\n  try {\r\n    const response = await apiClient.post(`/vaccination-management/event/${eventId}/send-consents`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'send vaccination consents');\r\n  }\r\n};\r\n\r\nexport const getVaccinationEventConsents = async (eventId) => {\r\n  try {\r\n    const response = await apiClient.get(`/vaccination-management/event/${eventId}/consents`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch vaccination event consents');\r\n  }\r\n};\r\n\r\nexport const getVaccinationRecords = async (eventId) => {\r\n  try {\r\n    const response = await apiClient.get(`/vaccination-management/event/${eventId}/records`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch vaccination records');\r\n  }\r\n};\r\n\r\nexport const createVaccinationRecord = async (recordData) => {\r\n  try {\r\n    const response = await apiClient.post('/vaccination-management/records', recordData);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'create vaccination record');\r\n  }\r\n};\r\n\r\nexport const updateVaccinationRecord = async (recordId, recordData) => {\r\n  try {\r\n    const response = await apiClient.put(`/vaccination-management/record/${recordId}`, recordData);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'update vaccination record');\r\n  }\r\n};\r\n\r\n// Delete vaccination record\r\nexport const deleteVaccinationRecord = async (recordId) => {\r\n  try {\r\n    const response = await apiClient.delete(`/vaccination-management/record/${recordId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'delete vaccination record');\r\n  }\r\n};\r\n\r\n// Get all vaccination records for vaccination management\r\nexport const getAllVaccinationRecords = async () => {\r\n  try {\r\n    const response = await apiClient.get('/vaccination-management/records');\r\n    return response.data;\r\n  } catch (error) {\r\n    \r\n    handleApiError(error, 'fetch all vaccination records');\r\n  }\r\n};\r\n\r\n// Get vaccination statistics/summary\r\nexport const getVaccinationStatistics = async () => {\r\n  try {\r\n    const response = await apiClient.get('/vaccination-management/statistics');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch vaccination statistics');\r\n  }\r\n};\r\n\r\n// Get vaccination records by status\r\nexport const getVaccinationRecordsByStatus = async (status) => {\r\n  try {\r\n    const response = await apiClient.get(`/vaccination-management/records?status=${status}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch vaccination records by status');\r\n  }\r\n};\r\n\r\n// Health Event APIs for parents\r\nexport const getUpcomingHealthEventsForStudent = async (studentCode) => {\r\n  try {\r\n    const response = await apiClient.get(`/health-events/upcoming/student/${studentCode}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch upcoming health events for student');\r\n  }\r\n};\r\n\r\n// Get vaccination history for a student (for parents to view results)\r\nexport const getStudentVaccinationHistory = async (studentCode) => {\r\n  try {\r\n    const response = await apiClient.get(`/vaccination-management/student/${studentCode}/history`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch student vaccination history');\r\n  }\r\n};\r\n\r\n// Health Checkup Record APIs\r\nexport const getAllHealthCheckupRecords = async () => {\r\n  try {\r\n    const response = await apiClient.get('/health-checkup-records');\r\n    return response.data;\r\n  } catch (error) {\r\n    \r\n    handleApiError(error, 'fetch all health checkup records');\r\n  }\r\n};\r\n\r\nexport const getHealthCheckupRecordById = async (checkupId) => {\r\n  try {\r\n    const response = await apiClient.get(`/health-checkup-records/${checkupId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch health checkup record by ID');\r\n  }\r\n};\r\n\r\nexport const getHealthCheckupRecordsByStudent = async (studentId) => {\r\n  try {\r\n    const response = await apiClient.get(`/health-checkup-records/student/${studentId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch health checkup records by student');\r\n  }\r\n};\r\n\r\nexport const getHealthCheckupRecordsByEvent = async (eventId) => {\r\n  try {\r\n    const response = await apiClient.get(`/health-checkup-records/event/${eventId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch health checkup records by event');\r\n  }\r\n};\r\n\r\nexport const createHealthCheckupRecord = async (checkupData) => {\r\n  try {\r\n    const response = await apiClient.post('/health-checkup-records', checkupData);\r\n    return response.data;\r\n  } catch (error) {\r\n    \r\n    handleApiError(error, 'create health checkup record');\r\n  }\r\n};\r\n\r\nexport const updateHealthCheckupRecord = async (checkupId, checkupData) => {\r\n  try {\r\n    const response = await apiClient.put(`/health-checkup-records/${checkupId}`, checkupData);\r\n    return response.data;\r\n  } catch (error) {\r\n    \r\n    handleApiError(error, 'update health checkup record');\r\n  }\r\n};\r\n\r\nexport const deleteHealthCheckupRecord = async (checkupId) => {\r\n  try {\r\n    const response = await apiClient.delete(`/health-checkup-records/${checkupId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'delete health checkup record');\r\n  }\r\n};\r\n\r\nexport const getHealthCheckupStatistics = async () => {\r\n  try {\r\n    const response = await apiClient.get('/health-checkup-records/statistics');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch health checkup statistics');\r\n  }\r\n};\r\n\r\nexport const getHealthCheckupRecordsByStatus = async (status) => {\r\n  try {\r\n    const response = await apiClient.get(`/health-checkup-records?status=${status}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch health checkup records by status');\r\n  }\r\n};\r\n\r\n// Nurses Management APIs\r\nexport const getAllNurses = async () => {\r\n  try {\r\n    const response = await apiClient.get('/nurses');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch nurses');\r\n  }\r\n};\r\n\r\n// Health Checkup Types APIs\r\nexport const getAllHealthCheckupTypes = async () => {\r\n  try {\r\n    const response = await apiClient.get('/health-checkup-types');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch health checkup types');\r\n  }\r\n};\r\n\r\nexport const getHealthCheckupTypeById = async (typeId) => {\r\n  try {\r\n    const response = await apiClient.get(`/health-checkup-types/${typeId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch health checkup type by ID');\r\n  }\r\n};\r\n\r\nexport const searchHealthCheckupTypes = async (searchTerm) => {\r\n  try {\r\n    const response = await apiClient.get(`/health-checkup-types/search?term=${encodeURIComponent(searchTerm)}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'search health checkup types');\r\n  }\r\n};\r\n\r\nexport const createHealthCheckupType = async (typeData) => {\r\n  try {\r\n    const response = await apiClient.post('/health-checkup-types', typeData);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'create health checkup type');\r\n  }\r\n};\r\n\r\nexport const updateHealthCheckupType = async (typeId, typeData) => {\r\n  try {\r\n    const response = await apiClient.put(`/health-checkup-types/${typeId}`, typeData);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'update health checkup type');\r\n  }\r\n};\r\n\r\nexport const deleteHealthCheckupType = async (typeId) => {\r\n  try {\r\n    const response = await apiClient.delete(`/health-checkup-types/${typeId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'delete health checkup type');\r\n  }\r\n};\r\n\r\n// ADMIN APIS - Simple admin functionality\r\n// ========================================\r\n\r\n// Admin User Management APIs - Using existing student/nurse data\r\nexport const getAllUsers = async () => {\r\n  try {\r\n    // Get all users from existing endpoints\r\n    const [students, nurses] = await Promise.all([\r\n      getAllStudents(),\r\n      getAllNurses()\r\n    ]);\r\n    \r\n    // Generate phone numbers for demo purposes\r\n    const generatePhoneNumber = (index) => {\r\n      const baseNumber = 900000000;\r\n      return `+84 ${Math.floor((baseNumber + index) / 1000000)} ${Math.floor(((baseNumber + index) % 1000000) / 1000)} ${(baseNumber + index) % 1000}`;\r\n    };\r\n    \r\n    // Combine and format as user data\r\n    const users = [\r\n      ...(students || []).map((student, index) => ({\r\n        id: student.id || student.studentCode,\r\n        username: student.studentCode || student.username,\r\n        fullName: student.name || student.fullName,\r\n        email: student.email || `${student.studentCode || 'student'}@school.edu`,\r\n        phone: student.phoneNumber || student.phone || generatePhoneNumber(index + 100),\r\n        role: 'STUDENT',\r\n        status: student.status || 'active',\r\n        lastLogin: student.lastLogin || null,\r\n        createdAt: student.createdAt || new Date().toISOString(),\r\n        grade: student.grade || student.gradeLevel?.gradeName,\r\n        className: student.className || student.grade || student.gradeLevel?.gradeName\r\n      })),\r\n      ...(nurses || []).map((nurse, index) => ({\r\n        id: nurse.id || nurse.nurseId,\r\n        username: nurse.nurseCode || nurse.username,\r\n        fullName: nurse.fullName || nurse.name,\r\n        email: nurse.email || `${nurse.nurseCode || 'nurse'}@school.edu`,\r\n        phone: nurse.phoneNumber || nurse.phone || generatePhoneNumber(index + 200),\r\n        role: 'NURSE',\r\n        status: nurse.status || 'active',\r\n        lastLogin: nurse.lastLogin || null,\r\n        createdAt: nurse.createdAt || new Date().toISOString(),\r\n        qualification: nurse.qualification,\r\n        specialization: nurse.specialization,\r\n        department: nurse.department || 'Medical'\r\n      }))\r\n    ];\r\n\r\n    // Add additional mock users if we have less than 11 users to match requirements\r\n    const additionalUsers = [];\r\n    const currentUserCount = users.length;\r\n    \r\n    if (currentUserCount < 11) {\r\n      const mockUsers = [\r\n        {\r\n          id: 'ADMIN001',\r\n          username: 'admin001',\r\n          fullName: 'System Administrator',\r\n          email: 'admin@fptjunior.edu.vn',\r\n          phone: '+84 901 234 567',\r\n          role: 'ADMIN',\r\n          status: 'active',\r\n          lastLogin: new Date(Date.now() - 1000 * 60 * 30).toISOString(),\r\n          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 30).toISOString()\r\n        },\r\n        {\r\n          id: 'PAR001',\r\n          username: 'parent001',\r\n          fullName: 'Nguyen Van Duc',\r\n          email: 'nvduc@gmail.com',\r\n          phone: '+84 903 456 789',\r\n          role: 'PARENT',\r\n          status: 'active',\r\n          lastLogin: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(),\r\n          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 15).toISOString(),\r\n          studentName: 'Nguyen Minh Khai'\r\n        },\r\n        {\r\n          id: 'PAR002',\r\n          username: 'parent002',\r\n          fullName: 'Tran Thi Hoa',\r\n          email: 'tthoa@gmail.com',\r\n          phone: '+84 904 567 890',\r\n          role: 'PARENT',\r\n          status: 'active',\r\n          lastLogin: new Date(Date.now() - 1000 * 60 * 60 * 1).toISOString(),\r\n          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 18).toISOString(),\r\n          studentName: 'Tran Thi Lan'\r\n        },\r\n        {\r\n          id: 'PAR003',\r\n          username: 'parent003',\r\n          fullName: 'Le Quang Minh',\r\n          email: 'lqminh@gmail.com',\r\n          phone: '+84 905 678 901',\r\n          role: 'PARENT',\r\n          status: 'active',\r\n          lastLogin: new Date(Date.now() - 1000 * 60 * 60 * 3).toISOString(),\r\n          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 12).toISOString(),\r\n          studentName: 'Le Van Nam'\r\n        },\r\n        {\r\n          id: 'PAR004',\r\n          username: 'parent004',\r\n          fullName: 'Pham Van Long',\r\n          email: 'pvlong@gmail.com',\r\n          phone: '+84 906 789 012',\r\n          role: 'PARENT',\r\n          status: 'inactive',\r\n          lastLogin: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7).toISOString(),\r\n          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 20).toISOString(),\r\n          studentName: 'Pham Thi Mai'\r\n        }\r\n      ];\r\n\r\n      // Add as many mock users as needed to reach 11 total\r\n      const usersToAdd = Math.min(mockUsers.length, 11 - currentUserCount);\r\n      additionalUsers.push(...mockUsers.slice(0, usersToAdd));\r\n    }\r\n    \r\n    return [...users, ...additionalUsers];\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch all users for admin');\r\n  }\r\n};\r\n\r\n// Update user information\r\nexport const updateUser = async (userId, userData) => {\r\n  try {\r\n    const response = await apiClient.put(`/admin/users/${userId}`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'update user');\r\n  }\r\n};\r\n\r\n// Delete user\r\nexport const deleteUser = async (userId) => {\r\n  try {\r\n    const response = await apiClient.delete(`/admin/users/${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'delete user');\r\n  }\r\n};\r\n\r\n// Activate user\r\nexport const activateUser = async (userId) => {\r\n  try {\r\n    const response = await apiClient.put(`/admin/users/${userId}/activate`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'activate user');\r\n  }\r\n};\r\n\r\n// Deactivate user\r\nexport const deactivateUser = async (userId) => {\r\n  try {\r\n    const response = await apiClient.put(`/admin/users/${userId}/deactivate`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'deactivate user');\r\n  }\r\n};\r\n\r\n// Admin Dashboard Statistics - Using real backend data\r\nexport const getAdminDashboardStats = async () => {\r\n  try {\r\n    const response = await apiClient.get('/admin/dashboard/stats');\r\n    return response.data;\r\n  } catch (error) {\r\n    return {\r\n      quickStats: {\r\n        totalUsers: 0,\r\n        totalStudents: 0,\r\n        activeNurses: 0,\r\n        pendingRequests: 0\r\n      },\r\n      recentActivities: []\r\n    };\r\n  }\r\n};\r\n\r\n// Get system reports with real data\r\nexport const getSystemReports = async (reportType = 'overview', startDate = null, endDate = null) => {\r\n  try {\r\n    const params = new URLSearchParams();\r\n    if (reportType) params.append('reportType', reportType);\r\n    if (startDate) params.append('startDate', startDate);\r\n    if (endDate) params.append('endDate', endDate);\r\n    \r\n    const response = await apiClient.get(`/admin/reports?${params.toString()}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch system reports');\r\n  }\r\n};\r\n\r\n// Data Export Functions for Backup\r\nexport const exportStudents = async () => {\r\n  try {\r\n    const response = await getAllStudentsAdmin();\r\n    \r\n    // Format the data properly for CSV export\r\n    const formattedData = (response || []).map(student => {\r\n      const exportData = {\r\n        studentCode: student.studentCode || '',\r\n        fullName: student.fullName || '',\r\n        dateOfBirth: student.dateOfBirth ? new Date(student.dateOfBirth).toLocaleDateString('en-US') : '',\r\n        gender: student.gender || '',\r\n        classGradeLevel: student.classGradeLevel || student.gradeLevel || '',\r\n        className: student.className || student.class?.name || '',\r\n        schoolYear: student.schoolYear || '2024-2025',\r\n        medicalConditions: student.medicalConditions || 'No allergies',\r\n        medicationAllergies: student.medicationAllergies || 'No medication allergies'\r\n      };\r\n\r\n      // Only add emergencyContact and emergencyPhone if they exist\r\n      if (student.emergencyContact) {\r\n        if (typeof student.emergencyContact === 'object') {\r\n          if (student.emergencyContact.name) {\r\n            exportData.emergencyContactName = student.emergencyContact.name;\r\n          }\r\n          if (student.emergencyContact.phone) {\r\n            exportData.emergencyContactPhone = student.emergencyContact.phone;\r\n          }\r\n        } else {\r\n          exportData.emergencyContact = student.emergencyContact;\r\n        }\r\n      }\r\n\r\n      if (student.emergencyPhone && !exportData.emergencyContactPhone) {\r\n        exportData.emergencyPhone = student.emergencyPhone;\r\n      }\r\n\r\n      // Only add parentId and parentName if they exist\r\n      if (student.parentId) {\r\n        exportData.parentId = student.parentId;\r\n      }\r\n      if (student.parentName) {\r\n        exportData.parentName = student.parentName;\r\n      }\r\n\r\n      return exportData;\r\n    });\r\n    \r\n    return formattedData;\r\n  } catch (error) {\r\n    handleApiError(error, 'export students data');\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const exportHealthEvents = async () => {\r\n  try {\r\n    const response = await getAllHealthEvents();\r\n    return response || [];\r\n  } catch (error) {\r\n    \r\n    handleApiError(error, 'export health events data');\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const exportUsers = async () => {\r\n  try {\r\n    const response = await getAllUsers();\r\n    \r\n    // Format the data properly for CSV export (remove grade and className for users)\r\n    const formattedData = (response || []).map(user => ({\r\n      id: user.id || '',\r\n      username: user.username || '',\r\n      fullName: user.fullName || '',\r\n      email: user.email || '',\r\n      phone: user.phone || '',\r\n      role: user.role || (user.roles && user.roles.length > 0 ? user.roles[0] : ''),\r\n      status: user.status || '',\r\n      lastLogin: user.lastLogin ? new Date(user.lastLogin).toLocaleDateString('en-US') : '',\r\n      createdAt: user.createdAt ? new Date(user.createdAt).toLocaleDateString('en-US') : '',\r\n      // Don't include grade and className for users table\r\n    }));\r\n    \r\n    return formattedData;\r\n  } catch (error) {\r\n    handleApiError(error, 'export users data');\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const exportHealthCheckups = async () => {\r\n  try {\r\n    // Use getAllStudentsWithHealthData to get checkup records\r\n    const response = await getAllStudentsWithHealthData();\r\n    \r\n    // Extract health checkup data from students\r\n    const healthCheckups = [];\r\n    if (Array.isArray(response)) {\r\n      response.forEach(student => {\r\n        if (student.healthCheckups && Array.isArray(student.healthCheckups)) {\r\n          student.healthCheckups.forEach(checkup => {\r\n            healthCheckups.push({\r\n              ...checkup,\r\n              studentName: student.fullName,\r\n              studentCode: student.studentCode,\r\n              gradeLevel: student.gradeLevel\r\n            });\r\n          });\r\n        }\r\n      });\r\n    }\r\n    \r\n    return healthCheckups || [];\r\n  } catch (error) {\r\n    \r\n    handleApiError(error, 'export health checkups data');\r\n    return [];\r\n  }\r\n};\r\n\r\n// Student API functions\r\nexport const getStudentHealthProfile = async () => {\r\n  try {\r\n    const response = await apiClient.get('/student/health-profile');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch student health profile');\r\n  }\r\n};\r\n\r\nexport const getStudentMedicalHistory = async () => {\r\n  try {\r\n    const response = await apiClient.get('/student/medical-history');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch student medical history');\r\n  }\r\n};\r\n\r\nexport const getStudentVaccinationRecords = async () => {\r\n  try {\r\n    const response = await apiClient.get('/student/vaccination-records');\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'fetch student vaccination records');\r\n  }\r\n};\r\n\r\n// Student Dashboard\r\nexport const getStudentDashboard = async () => {\r\n  try {\r\n    const response = await apiClient.get('/student/dashboard');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Return default data if dashboard endpoint is not available\r\n    return {\r\n      studentCode: 'N/A',\r\n      fullName: 'Student',\r\n      email: '',\r\n      quickStats: {\r\n        totalAppointments: 0,\r\n        pendingVaccinations: 0,\r\n        healthDeclarations: 0,\r\n        unreadNotifications: 0\r\n      },\r\n      recentActivities: [],\r\n      healthProfile: { hasData: false, message: 'No health profile available' },\r\n      upcomingEvents: [],\r\n      medicalHistory: []\r\n    };\r\n  }\r\n};\r\n\r\n// Document Download APIs\r\nexport const downloadHealthDocument = async (documentType) => {\r\n  try {\r\n    const response = await apiClient.get(`/documents/${documentType}`, {\r\n      responseType: 'blob'\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'download health document');\r\n  }\r\n};\r\n\r\nexport const generateHealthDocumentPDF = async (documentType, documentData) => {\r\n  try {\r\n    const response = await apiClient.post(`/documents/generate/${documentType}`, documentData, {\r\n      responseType: 'blob'\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'generate health document PDF');\r\n  }\r\n};\r\n\r\n// Notification APIs - Disabled (functionality removed from project)\r\nexport const getUserNotifications = async () => {\r\n  // Notification functionality removed from project\r\n  return [];\r\n};\r\n\r\nexport const markNotificationAsRead = async (notificationId) => {\r\n  // Notification functionality removed from project\r\n  return { success: true };\r\n};\r\n\r\nexport const markAllNotificationsAsRead = async () => {\r\n  // Notification functionality removed from project\r\n  return { success: true };\r\n};\r\n\r\n// Get medical events by student code\r\nexport const getMedicalEventsByStudent = async (studentCode) => {\r\n  try {\r\n    const response = await apiClient.get(`/medical-events/student/${studentCode}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response?.status === 404) {\r\n      return []; // No medical events found\r\n    }\r\n    handleApiError(error, 'fetch medical events by student');\r\n    return [];\r\n  }\r\n};\r\n\r\nexport { apiClient };\r\nexport default apiClient;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}