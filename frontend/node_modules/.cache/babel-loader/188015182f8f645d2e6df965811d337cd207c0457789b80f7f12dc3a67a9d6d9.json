{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import{Box,Typography,CircularProgress,Alert,Paper,Grid}from'@mui/material';import StudentHealthCheckupEventItem from'../../components/healthcheckup/StudentHealthCheckupEventItem';import{getStudentHealthCheckupsByStudentId}from'../../utils/api';import{useAuth}from'../../context/AuthContext';// To get student ID\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const StudentHealthCheckupHistory=()=>{const{user}=useAuth();// Assuming user object has userId when role is STUDENT\nconst[studentCheckups,setStudentCheckups]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const fetchStudentCheckupData=useCallback(async()=>{if(!user||user.role!=='STUDENT'){setError('This page is for students only.');setLoading(false);return;}setLoading(true);try{// Fetch all checkups for the logged-in student\nconst checkupsData=await getStudentHealthCheckupsByStudentId(user.userId);// Sort by event start date, most recent first\nconst sortedCheckups=(checkupsData||[]).sort((a,b)=>new Date(b.healthEvent.startDate)-new Date(a.healthEvent.startDate));setStudentCheckups(sortedCheckups);setError(null);}catch(err){setError(err.message||'Failed to fetch your health checkup history.');setStudentCheckups([]);}finally{setLoading(false);}},[user]);useEffect(()=>{fetchStudentCheckupData();},[fetchStudentCheckupData]);if(loading){return/*#__PURE__*/_jsx(Box,{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",minHeight:\"80vh\",children:/*#__PURE__*/_jsx(CircularProgress,{})});}if(error){return/*#__PURE__*/_jsx(Alert,{severity:\"error\",sx:{m:2},children:error});}if(!user||user.role!=='STUDENT'){return/*#__PURE__*/_jsx(Typography,{sx:{p:2},children:\"This page is for students only.\"});}return/*#__PURE__*/_jsxs(Paper,{sx:{p:{xs:1,sm:2,md:3},m:{xs:1,sm:2}},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",gutterBottom:true,sx:{mb:2},children:\"Your Health Checkup History\"}),studentCheckups.length===0?/*#__PURE__*/_jsx(Typography,{children:\"You have no health checkup records at this time.\"}):/*#__PURE__*/_jsx(Grid,{container:true,spacing:2,children:studentCheckups.map(checkup=>/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(StudentHealthCheckupEventItem,{studentCheckup:checkup})},checkup.checkupId))})]});};export default StudentHealthCheckupHistory;","map":{"version":3,"names":["React","useState","useEffect","useCallback","Box","Typography","CircularProgress","Alert","Paper","Grid","StudentHealthCheckupEventItem","getStudentHealthCheckupsByStudentId","useAuth","jsx","_jsx","jsxs","_jsxs","StudentHealthCheckupHistory","user","studentCheckups","setStudentCheckups","loading","setLoading","error","setError","fetchStudentCheckupData","role","checkupsData","userId","sortedCheckups","sort","a","b","Date","healthEvent","startDate","err","message","display","justifyContent","alignItems","minHeight","children","severity","sx","m","p","xs","sm","md","variant","gutterBottom","mb","length","container","spacing","map","checkup","item","studentCheckup","checkupId"],"sources":["C:/Users/trand/OneDrive/Documents/GitHub/SchoolMedicalManagement/frontend/src/pages/student/StudentHealthCheckupHistory.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Box, Typography, CircularProgress, Alert, Paper, Grid } from '@mui/material';\r\nimport StudentHealthCheckupEventItem from '../../components/healthcheckup/StudentHealthCheckupEventItem';\r\nimport { getStudentHealthCheckupsByStudentId } from '../../utils/api'; \r\nimport { useAuth } from '../../context/AuthContext'; // To get student ID\r\n\r\nconst StudentHealthCheckupHistory = () => {\r\n    const { user } = useAuth(); // Assuming user object has userId when role is STUDENT\r\n    const [studentCheckups, setStudentCheckups] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    const fetchStudentCheckupData = useCallback(async () => {\r\n        if (!user || user.role !== 'STUDENT') {\r\n            setError('This page is for students only.');\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        try {\r\n            // Fetch all checkups for the logged-in student\r\n            const checkupsData = await getStudentHealthCheckupsByStudentId(user.userId);\r\n            // Sort by event start date, most recent first\r\n            const sortedCheckups = (checkupsData || []).sort((a, b) => \r\n                new Date(b.healthEvent.startDate) - new Date(a.healthEvent.startDate)\r\n            );\r\n            setStudentCheckups(sortedCheckups);\r\n            setError(null);\r\n        } catch (err) {\r\n            setError(err.message || 'Failed to fetch your health checkup history.');\r\n            setStudentCheckups([]);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        fetchStudentCheckupData();\r\n    }, [fetchStudentCheckupData]);\r\n\r\n    if (loading) {\r\n        return <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\"><CircularProgress /></Box>;\r\n    }\r\n\r\n    if (error) {\r\n        return <Alert severity=\"error\" sx={{ m: 2 }}>{error}</Alert>;\r\n    }\r\n\r\n    if (!user || user.role !== 'STUDENT') {\r\n        return <Typography sx={{p:2}}>This page is for students only.</Typography>;\r\n    }\r\n\r\n    return (\r\n        <Paper sx={{ p: { xs: 1, sm: 2, md: 3 }, m: { xs: 1, sm: 2 } }}>\r\n            <Typography variant=\"h4\" gutterBottom sx={{ mb: 2 }}>Your Health Checkup History</Typography>\r\n            \r\n            {studentCheckups.length === 0 ? (\r\n                <Typography>You have no health checkup records at this time.</Typography>\r\n            ) : (\r\n                <Grid container spacing={2}>\r\n                    {studentCheckups.map(checkup => (\r\n                        <Grid item xs={12} key={checkup.checkupId}>\r\n                            <StudentHealthCheckupEventItem studentCheckup={checkup} />\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n            )}\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default StudentHealthCheckupHistory;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}