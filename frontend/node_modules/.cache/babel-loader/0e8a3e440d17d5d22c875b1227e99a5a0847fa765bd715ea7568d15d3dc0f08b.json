{"ast":null,"code":"import React,{createContext,useContext}from'react';import{ThemeProvider}from'@mui/material/styles';import{CssBaseline}from'@mui/material';import{createAppTheme}from'../theme';// Create Theme Context\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext();// Custom hook to use theme context\nexport const useThemeMode=()=>{const context=useContext(ThemeContext);if(!context){throw new Error('useThemeMode must be used within a ThemeProvider');}return context;};// Theme Provider Component - light mode only\nexport const AppThemeProvider=_ref=>{let{children}=_ref;// Always use light mode\nconst mode='light';// Disabled functions for dark mode\nconst toggleColorMode=()=>{// Dark mode functionality removed\n};const setColorMode=()=>{// Dark mode functionality removed\n};// Create theme based on light mode only\nconst theme=createAppTheme();// Context value\nconst contextValue={mode,toggleColorMode,setColorMode,theme};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:contextValue,children:/*#__PURE__*/_jsxs(ThemeProvider,{theme:theme,children:[/*#__PURE__*/_jsx(CssBaseline,{}),children]})});};export default ThemeContext;","map":{"version":3,"names":["React","createContext","useContext","ThemeProvider","CssBaseline","createAppTheme","jsx","_jsx","jsxs","_jsxs","ThemeContext","useThemeMode","context","Error","AppThemeProvider","_ref","children","mode","toggleColorMode","setColorMode","theme","contextValue","Provider","value"],"sources":["C:/Users/trand/OneDrive/Documents/GitHub/SchoolMedicalManagement/frontend/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext } from 'react';\r\nimport { ThemeProvider } from '@mui/material/styles';\r\nimport { CssBaseline } from '@mui/material';\r\nimport { createAppTheme } from '../theme';\r\n\r\n// Create Theme Context\r\nconst ThemeContext = createContext();\r\n\r\n// Custom hook to use theme context\r\nexport const useThemeMode = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useThemeMode must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Theme Provider Component - light mode only\r\nexport const AppThemeProvider = ({ children }) => {\r\n  // Always use light mode\r\n  const mode = 'light';\r\n\r\n  // Disabled functions for dark mode\r\n  const toggleColorMode = () => {\r\n    // Dark mode functionality removed\r\n  };\r\n\r\n  const setColorMode = () => {\r\n    // Dark mode functionality removed\r\n  };\r\n\r\n  // Create theme based on light mode only\r\n  const theme = createAppTheme();\r\n\r\n  // Context value\r\n  const contextValue = {\r\n    mode,\r\n    toggleColorMode,\r\n    setColorMode,\r\n    theme,\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={contextValue}>\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        {children}\r\n      </ThemeProvider>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ThemeContext;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,KAAQ,OAAO,CACxD,OAASC,aAAa,KAAQ,sBAAsB,CACpD,OAASC,WAAW,KAAQ,eAAe,CAC3C,OAASC,cAAc,KAAQ,UAAU,CAEzC;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,KAAM,CAAAC,YAAY,cAAGT,aAAa,CAAC,CAAC,CAEpC;AACA,MAAO,MAAM,CAAAU,YAAY,CAAGA,CAAA,GAAM,CAChC,KAAM,CAAAC,OAAO,CAAGV,UAAU,CAACQ,YAAY,CAAC,CACxC,GAAI,CAACE,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,kDAAkD,CAAC,CACrE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,gBAAgB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC3C;AACA,KAAM,CAAAE,IAAI,CAAG,OAAO,CAEpB;AACA,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5B;AAAA,CACD,CAED,KAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CACzB;AAAA,CACD,CAED;AACA,KAAM,CAAAC,KAAK,CAAGf,cAAc,CAAC,CAAC,CAE9B;AACA,KAAM,CAAAgB,YAAY,CAAG,CACnBJ,IAAI,CACJC,eAAe,CACfC,YAAY,CACZC,KACF,CAAC,CAED,mBACEb,IAAA,CAACG,YAAY,CAACY,QAAQ,EAACC,KAAK,CAAEF,YAAa,CAAAL,QAAA,cACzCP,KAAA,CAACN,aAAa,EAACiB,KAAK,CAAEA,KAAM,CAAAJ,QAAA,eAC1BT,IAAA,CAACH,WAAW,GAAE,CAAC,CACdY,QAAQ,EACI,CAAC,CACK,CAAC,CAE5B,CAAC,CAED,cAAe,CAAAN,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}