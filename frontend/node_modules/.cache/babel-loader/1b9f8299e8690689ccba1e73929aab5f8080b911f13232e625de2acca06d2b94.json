{"ast":null,"code":"// Hook for using English UI text throughout the application\n// File: frontend/src/hooks/useUIText.js\nimport{UI_TEXT,STATUS_COLORS,EVENT_TYPE_COLORS}from'../constants/uiText';/**\r\n * Custom hook for accessing English UI text and utilities\r\n * Usage: const { t, statusColor, eventTypeColor } = useUIText();\r\n * Then: t.healthCheckup, t.planned, statusColor('PLANNED'), etc.\r\n */export const useUIText=()=>{// Get status color for Material-UI components\nconst getStatusColor=status=>{return STATUS_COLORS[status]||'default';};// Get event type color for Material-UI components\nconst getEventTypeColor=eventType=>{return EVENT_TYPE_COLORS[eventType]||'default';};// Format date for display (English format)\nconst formatDate=dateString=>{if(!dateString)return UI_TEXT.notAvailable;try{// Handle different date formats\nconst date=new Date(dateString);if(isNaN(date.getTime()))return UI_TEXT.notAvailable;return date.toLocaleDateString('en-US',{year:'numeric',month:'short',day:'numeric'});}catch(error){return UI_TEXT.notAvailable;}};// Format date and time for display (English format)\nconst formatDateTime=dateString=>{if(!dateString)return UI_TEXT.notAvailable;try{// Handle different date formats\nconst date=new Date(dateString);if(isNaN(date.getTime()))return UI_TEXT.notAvailable;return date.toLocaleString('en-US',{year:'numeric',month:'short',day:'numeric',hour:'2-digit',minute:'2-digit'});}catch(error){return UI_TEXT.notAvailable;}};// Get event type label with proper English text\nconst getEventTypeLabel=eventType=>{switch(eventType){case'HEALTH_CHECKUP':return UI_TEXT.healthCheckup;case'VACCINATION':return UI_TEXT.vaccination;default:return UI_TEXT.unknown;}};// Get status label with proper English text\nconst getStatusLabel=status=>{switch(status){case'PLANNED':return UI_TEXT.planned;case'CONSENT_COLLECTION':return UI_TEXT.collectingConsent;case'IN_PROGRESS':return UI_TEXT.inProgress;case'COMPLETED':return UI_TEXT.completed;case'CANCELLED':return UI_TEXT.cancelled;default:return status||UI_TEXT.unknown;}};// Get gender label with proper English text\nconst getGenderLabel=gender=>{switch(gender===null||gender===void 0?void 0:gender.toLowerCase()){case'male':case'm':return UI_TEXT.male;case'female':case'f':return UI_TEXT.female;default:return UI_TEXT.other;}};return{// Main UI text object\nt:UI_TEXT,// Utility functions\ngetStatusColor,getEventTypeColor,formatDate,formatDateTime,getEventTypeLabel,getStatusLabel,getGenderLabel,// Direct access to color mappings\nstatusColors:STATUS_COLORS,eventTypeColors:EVENT_TYPE_COLORS};};export default useUIText;","map":{"version":3,"names":["UI_TEXT","STATUS_COLORS","EVENT_TYPE_COLORS","useUIText","getStatusColor","status","getEventTypeColor","eventType","formatDate","dateString","notAvailable","date","Date","isNaN","getTime","toLocaleDateString","year","month","day","error","formatDateTime","toLocaleString","hour","minute","getEventTypeLabel","healthCheckup","vaccination","unknown","getStatusLabel","planned","collectingConsent","inProgress","completed","cancelled","getGenderLabel","gender","toLowerCase","male","female","other","t","statusColors","eventTypeColors"],"sources":["C:/Users/trand/OneDrive/Documents/GitHub/SchoolMedicalManagement/frontend/src/hooks/useUIText.js"],"sourcesContent":["// Hook for using English UI text throughout the application\r\n// File: frontend/src/hooks/useUIText.js\r\n\r\nimport { UI_TEXT, STATUS_COLORS, EVENT_TYPE_COLORS } from '../constants/uiText';\r\n\r\n/**\r\n * Custom hook for accessing English UI text and utilities\r\n * Usage: const { t, statusColor, eventTypeColor } = useUIText();\r\n * Then: t.healthCheckup, t.planned, statusColor('PLANNED'), etc.\r\n */\r\nexport const useUIText = () => {\r\n  // Get status color for Material-UI components\r\n  const getStatusColor = (status) => {\r\n    return STATUS_COLORS[status] || 'default';\r\n  };\r\n\r\n  // Get event type color for Material-UI components\r\n  const getEventTypeColor = (eventType) => {\r\n    return EVENT_TYPE_COLORS[eventType] || 'default';\r\n  };\r\n  // Format date for display (English format)\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return UI_TEXT.notAvailable;\r\n    try {\r\n      // Handle different date formats\r\n      const date = new Date(dateString);\r\n      if (isNaN(date.getTime())) return UI_TEXT.notAvailable;\r\n      \r\n      return date.toLocaleDateString('en-US', {\r\n        year: 'numeric',\r\n        month: 'short', \r\n        day: 'numeric'\r\n      });\r\n    } catch (error) {\r\n      return UI_TEXT.notAvailable;\r\n    }\r\n  };\r\n  // Format date and time for display (English format)\r\n  const formatDateTime = (dateString) => {\r\n    if (!dateString) return UI_TEXT.notAvailable;\r\n    try {\r\n      // Handle different date formats\r\n      const date = new Date(dateString);\r\n      if (isNaN(date.getTime())) return UI_TEXT.notAvailable;\r\n      \r\n      return date.toLocaleString('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    } catch (error) {\r\n      return UI_TEXT.notAvailable;\r\n    }\r\n  };\r\n\r\n  // Get event type label with proper English text\r\n  const getEventTypeLabel = (eventType) => {\r\n    switch (eventType) {\r\n      case 'HEALTH_CHECKUP':\r\n        return UI_TEXT.healthCheckup;\r\n      case 'VACCINATION':\r\n        return UI_TEXT.vaccination;\r\n      default:\r\n        return UI_TEXT.unknown;\r\n    }\r\n  };\r\n\r\n  // Get status label with proper English text\r\n  const getStatusLabel = (status) => {\r\n    switch (status) {\r\n      case 'PLANNED':\r\n        return UI_TEXT.planned;\r\n      case 'CONSENT_COLLECTION':\r\n        return UI_TEXT.collectingConsent;\r\n      case 'IN_PROGRESS':\r\n        return UI_TEXT.inProgress;\r\n      case 'COMPLETED':\r\n        return UI_TEXT.completed;\r\n      case 'CANCELLED':\r\n        return UI_TEXT.cancelled;\r\n      default:\r\n        return status || UI_TEXT.unknown;\r\n    }\r\n  };\r\n\r\n  // Get gender label with proper English text\r\n  const getGenderLabel = (gender) => {\r\n    switch (gender?.toLowerCase()) {\r\n      case 'male':\r\n      case 'm':\r\n        return UI_TEXT.male;\r\n      case 'female':\r\n      case 'f':\r\n        return UI_TEXT.female;\r\n      default:\r\n        return UI_TEXT.other;\r\n    }\r\n  };\r\n\r\n  return {\r\n    // Main UI text object\r\n    t: UI_TEXT,\r\n    \r\n    // Utility functions\r\n    getStatusColor,\r\n    getEventTypeColor,\r\n    formatDate,\r\n    formatDateTime,\r\n    getEventTypeLabel,\r\n    getStatusLabel,\r\n    getGenderLabel,\r\n    \r\n    // Direct access to color mappings\r\n    statusColors: STATUS_COLORS,\r\n    eventTypeColors: EVENT_TYPE_COLORS\r\n  };\r\n};\r\n\r\nexport default useUIText;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}