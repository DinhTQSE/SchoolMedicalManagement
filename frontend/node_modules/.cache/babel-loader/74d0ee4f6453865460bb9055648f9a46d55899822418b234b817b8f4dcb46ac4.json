{"ast":null,"code":"import React,{useState,useEffect,useContext}from'react';import axios from'axios';import{AuthContext}from'../../context/AuthContext';import{Typography,Paper,CircularProgress,Alert,Container,Button,Box,FormControl,InputLabel,Select,MenuItem,Divider,Card,CardContent,Grid,List,ListItem,ListItemIcon,ListItemText,Chip}from'@mui/material';import{ArrowBack as ArrowBackIcon,Vaccines as VaccinesIcon,MedicalServices as MedicalIcon,Visibility as VisibilityIcon,CalendarToday as DateIcon,WarningAmber as AllergiesIcon,HealthAndSafety as HealthIcon,AccessibilityNew as PhysicalIcon,Psychology as MentalIcon,Restaurant as DietaryIcon,MedicationLiquid as MedicationIcon}from'@mui/icons-material';import{useNavigate,Link}from'react-router-dom';// Helper function to format dates\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const formatDate=dateString=>{if(!dateString)return'Not provided';const options={year:'numeric',month:'long',day:'numeric'};return new Date(dateString).toLocaleDateString(undefined,options);};const StudentHealthProfilePage=()=>{var _healthProfile$studen;const[healthProfile,setHealthProfile]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[selectedStudent,setSelectedStudent]=useState('');const[children,setChildren]=useState([]);const{currentUser}=useContext(AuthContext);const navigate=useNavigate();// Fetch children list\nuseEffect(()=>{const fetchChildren=async()=>{if(currentUser!==null&&currentUser!==void 0&&currentUser.username){try{var _response$data;const token=localStorage.getItem('token');const response=await axios.get('/api/parent/students',{headers:{Authorization:`Bearer ${token}`}});setChildren(response.data||[]);// If there's only one child, select it automatically\nif(((_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.length)===1){setSelectedStudent(response.data[0].studentCode);}}catch(err){console.error('Error fetching children:',err);setError('Failed to fetch children. Please try again later.');}}};fetchChildren();},[currentUser]);// Fetch student health profile when a student is selected\nuseEffect(()=>{const fetchHealthProfile=async()=>{if(selectedStudent){setLoading(true);setError(null);try{const token=localStorage.getItem('token');// First, try to get the latest approved health declaration\nconst declarationsResponse=await axios.get(`/api/health-declaration/history?studentCode=${selectedStudent}`,{headers:{Authorization:`Bearer ${token}`}});const declarations=declarationsResponse.data||[];// Find the latest approved declaration if any (handling different status formats)\nconst latestApprovedDeclaration=declarations.find(d=>d.status&&['approved','APPROVED','Approved'].includes(d.status))||declarations[0];// Fallback to the first declaration if none is approved\nif(latestApprovedDeclaration){// Get student details from the children array instead of making a separate API call\nconst selectedChild=children.find(child=>child.studentCode===selectedStudent);const studentDetails={fullName:(selectedChild===null||selectedChild===void 0?void 0:selectedChild.fullName)||'Student',studentCode:selectedStudent,...selectedChild// Include other properties if available\n};// Combine data to create a complete health profile\nsetHealthProfile({studentDetails:studentDetails,healthData:latestApprovedDeclaration,latestDeclarationDate:latestApprovedDeclaration.declarationDate||new Date().toISOString(),declarations:declarations});}else{setHealthProfile(null);}}catch(err){console.error('Error fetching health profile:',err);setError('Failed to fetch health record. Please try again later.');}finally{setLoading(false);}}else{setHealthProfile(null);setLoading(false);}};fetchHealthProfile();},[selectedStudent]);// Handle student selection change\nconst handleStudentChange=event=>{setSelectedStudent(event.target.value);};// Navigate back to parent dashboard\nconst handleBack=()=>{navigate('/parent/dashboard');};// Helper to render list items for health data\nconst renderListItem=function(icon,primary){let secondary=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;return/*#__PURE__*/_jsxs(ListItem,{children:[/*#__PURE__*/_jsx(ListItemIcon,{children:icon}),/*#__PURE__*/_jsx(ListItemText,{primary:primary,secondary:secondary})]});};// Helper to render info section\nconst renderInfoSection=(title,content,icon)=>/*#__PURE__*/_jsx(Card,{variant:\"outlined\",sx:{mb:3},children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',mb:2},children:[icon,/*#__PURE__*/_jsx(Typography,{variant:\"h6\",component:\"div\",sx:{ml:1},children:title})]}),/*#__PURE__*/_jsx(Divider,{sx:{mb:2}}),content]})});return/*#__PURE__*/_jsxs(Container,{maxWidth:\"lg\",sx:{py:4},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',mb:4},children:[/*#__PURE__*/_jsx(Button,{startIcon:/*#__PURE__*/_jsx(ArrowBackIcon,{}),onClick:handleBack,sx:{mr:2},children:\"Back\"}),/*#__PURE__*/_jsx(Typography,{variant:\"h4\",component:\"h1\",sx:{flexGrow:1},children:\"Student Health Profile\"})]}),/*#__PURE__*/_jsxs(Paper,{elevation:2,sx:{p:3,mb:4},children:[/*#__PURE__*/_jsxs(Box,{sx:{mb:3},children:[/*#__PURE__*/_jsx(Typography,{variant:\"body1\",paragraph:true,children:\"View your child's comprehensive health profile. This information is compiled from the latest approved health declaration.\"}),/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,variant:\"outlined\",sx:{mt:2},children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Select Child\"}),/*#__PURE__*/_jsxs(Select,{value:selectedStudent,onChange:handleStudentChange,label:\"Select Child\",children:[/*#__PURE__*/_jsx(MenuItem,{value:\"\",children:/*#__PURE__*/_jsx(\"em\",{children:\"-- Select a child --\"})}),children.map(child=>/*#__PURE__*/_jsx(MenuItem,{value:child.studentCode,children:child.fullName},child.studentCode))]})]})]}),!selectedStudent&&/*#__PURE__*/_jsx(Alert,{severity:\"info\",sx:{mt:2},children:\"Please select a child to view their health profile.\"}),selectedStudent&&loading&&/*#__PURE__*/_jsx(Box,{sx:{display:'flex',justifyContent:'center',p:4},children:/*#__PURE__*/_jsx(CircularProgress,{})}),selectedStudent&&error&&/*#__PURE__*/_jsx(Alert,{severity:\"error\",sx:{mt:2},children:error}),selectedStudent&&!loading&&!error&&/*#__PURE__*/_jsx(_Fragment,{children:healthProfile?/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Card,{sx:{mb:3},children:/*#__PURE__*/_jsx(CardContent,{children:/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',justifyContent:'space-between',flexWrap:'wrap'},children:[/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",component:\"div\",children:((_healthProfile$studen=healthProfile.studentDetails)===null||_healthProfile$studen===void 0?void 0:_healthProfile$studen.fullName)||'Student'}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"text.secondary\",children:[\"Student Code: \",selectedStudent]})]}),/*#__PURE__*/_jsxs(Box,{sx:{textAlign:'right'},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"text.secondary\",children:[\"Last Updated: \",formatDate(healthProfile.latestDeclarationDate)]}),\"                                                \",/*#__PURE__*/_jsx(Button,{variant:\"text\",size:\"small\",onClick:()=>navigate('/parent/health-declaration',{state:{studentCode:selectedStudent}}),startIcon:/*#__PURE__*/_jsx(HealthIcon,{}),sx:{mt:1},children:\"Update Health Information\"})]})]})})}),/*#__PURE__*/_jsxs(Grid,{container:true,spacing:3,children:[/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,md:6,children:[renderInfoSection('Allergies',healthProfile.healthData.allergies&&healthProfile.healthData.allergies.length>0?/*#__PURE__*/_jsx(List,{dense:true,children:healthProfile.healthData.allergies.filter(item=>item&&item.trim()).map((allergy,index)=>/*#__PURE__*/_jsxs(ListItem,{children:[/*#__PURE__*/_jsx(ListItemIcon,{children:/*#__PURE__*/_jsx(AllergiesIcon,{color:\"error\"})}),/*#__PURE__*/_jsx(ListItemText,{primary:allergy})]},index))}):/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:\"No allergies recorded\"}),/*#__PURE__*/_jsx(AllergiesIcon,{color:\"warning\"})),renderInfoSection('Chronic Illnesses',healthProfile.healthData.chronicIllnesses&&healthProfile.healthData.chronicIllnesses.length>0?/*#__PURE__*/_jsx(List,{dense:true,children:healthProfile.healthData.chronicIllnesses.filter(item=>item&&item.trim()).map((illness,index)=>/*#__PURE__*/_jsxs(ListItem,{children:[/*#__PURE__*/_jsx(ListItemIcon,{children:/*#__PURE__*/_jsx(MedicalIcon,{color:\"primary\"})}),/*#__PURE__*/_jsx(ListItemText,{primary:illness})]},index))}):/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:\"No chronic illnesses recorded\"}),/*#__PURE__*/_jsx(MedicalIcon,{color:\"primary\"}))]}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:6,children:renderInfoSection('Vaccinations',healthProfile.healthData.vaccinations&&healthProfile.healthData.vaccinations.length>0?/*#__PURE__*/_jsx(List,{dense:true,children:healthProfile.healthData.vaccinations.map((vaccine,index)=>/*#__PURE__*/_jsxs(ListItem,{children:[/*#__PURE__*/_jsx(ListItemIcon,{children:/*#__PURE__*/_jsx(VaccinesIcon,{color:\"success\"})}),/*#__PURE__*/_jsx(ListItemText,{primary:vaccine.vaccineName,secondary:`Date: ${formatDate(vaccine.vaccinationDate)}${vaccine.notes?` - ${vaccine.notes}`:''}`})]},index))}):/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:\"No vaccination records\"}),/*#__PURE__*/_jsx(VaccinesIcon,{color:\"success\"}))}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:renderInfoSection('Medical History',healthProfile.healthData.medicalHistory?/*#__PURE__*/_jsx(Typography,{variant:\"body1\",children:healthProfile.healthData.medicalHistory}):/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:\"No medical history provided\"}),/*#__PURE__*/_jsx(MedicalIcon,{color:\"primary\"}))}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:6,children:renderInfoSection('Health Status',/*#__PURE__*/_jsxs(List,{dense:true,children:[healthProfile.healthData.visionStatus&&renderListItem(/*#__PURE__*/_jsx(VisibilityIcon,{}),'Vision Status',healthProfile.healthData.visionStatus),healthProfile.healthData.hearingStatus&&renderListItem(/*#__PURE__*/_jsx(HealthIcon,{}),'Hearing Status',healthProfile.healthData.hearingStatus),healthProfile.healthData.specialNeeds&&renderListItem(/*#__PURE__*/_jsx(HealthIcon,{}),'Special Needs',healthProfile.healthData.specialNeeds),healthProfile.healthData.physicalLimitations&&renderListItem(/*#__PURE__*/_jsx(PhysicalIcon,{}),'Physical Limitations',healthProfile.healthData.physicalLimitations),healthProfile.healthData.mentalHealthConcerns&&renderListItem(/*#__PURE__*/_jsx(MentalIcon,{}),'Mental Health Concerns',healthProfile.healthData.mentalHealthConcerns),healthProfile.healthData.dietaryRestrictions&&renderListItem(/*#__PURE__*/_jsx(DietaryIcon,{}),'Dietary Restrictions',healthProfile.healthData.dietaryRestrictions)]}),/*#__PURE__*/_jsx(HealthIcon,{color:\"primary\"}))}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:6,children:renderInfoSection('Emergency Contacts',healthProfile.healthData.emergencyContacts&&healthProfile.healthData.emergencyContacts.length>0?/*#__PURE__*/_jsx(List,{dense:true,children:healthProfile.healthData.emergencyContacts.map((contact,index)=>/*#__PURE__*/_jsx(ListItem,{children:/*#__PURE__*/_jsx(ListItemText,{primary:contact.name,secondary:/*#__PURE__*/_jsxs(_Fragment,{children:[contact.relationship&&/*#__PURE__*/_jsxs(\"span\",{children:[\"Relationship: \",contact.relationship,/*#__PURE__*/_jsx(\"br\",{})]}),contact.phone&&/*#__PURE__*/_jsxs(\"span\",{children:[\"Phone: \",contact.phone,/*#__PURE__*/_jsx(\"br\",{})]}),contact.isEmergency&&/*#__PURE__*/_jsx(Chip,{label:\"Emergency Contact\",size:\"small\",color:\"error\",sx:{mt:0.5}})]})})},index))}):/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:\"No emergency contacts provided\"}),/*#__PURE__*/_jsx(MedicalIcon,{color:\"error\"}))})]}),/*#__PURE__*/_jsx(Box,{sx:{mt:4},children:/*#__PURE__*/_jsx(Button,{variant:\"outlined\",component:Link,to:\"/parent/health-records\",startIcon:/*#__PURE__*/_jsx(DateIcon,{}),children:\"View Health Declaration History\"})})]}):/*#__PURE__*/_jsxs(Alert,{severity:\"info\",sx:{mt:2},children:[\"No health profile available for this student. Please submit a health declaration to establish a health profile.\",/*#__PURE__*/_jsx(Box,{sx:{mt:2},children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",component:Link,to:`/parent/health-declaration?studentCode=${selectedStudent}`,startIcon:/*#__PURE__*/_jsx(MedicalIcon,{}),children:\"Create Health Declaration\"})})]})})]})]});};export default StudentHealthProfilePage;","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","AuthContext","Typography","Paper","CircularProgress","Alert","Container","Button","Box","FormControl","InputLabel","Select","MenuItem","Divider","Card","CardContent","Grid","List","ListItem","ListItemIcon","ListItemText","Chip","ArrowBack","ArrowBackIcon","Vaccines","VaccinesIcon","MedicalServices","MedicalIcon","Visibility","VisibilityIcon","CalendarToday","DateIcon","WarningAmber","AllergiesIcon","HealthAndSafety","HealthIcon","AccessibilityNew","PhysicalIcon","Psychology","MentalIcon","Restaurant","DietaryIcon","MedicationLiquid","MedicationIcon","useNavigate","Link","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","formatDate","dateString","options","year","month","day","Date","toLocaleDateString","undefined","StudentHealthProfilePage","_healthProfile$studen","healthProfile","setHealthProfile","loading","setLoading","error","setError","selectedStudent","setSelectedStudent","children","setChildren","currentUser","navigate","fetchChildren","username","_response$data","token","localStorage","getItem","response","get","headers","Authorization","data","length","studentCode","err","console","fetchHealthProfile","declarationsResponse","declarations","latestApprovedDeclaration","find","d","status","includes","selectedChild","child","studentDetails","fullName","healthData","latestDeclarationDate","declarationDate","toISOString","handleStudentChange","event","target","value","handleBack","renderListItem","icon","primary","secondary","arguments","renderInfoSection","title","content","variant","sx","mb","display","alignItems","component","ml","maxWidth","py","startIcon","onClick","mr","flexGrow","elevation","p","paragraph","fullWidth","mt","onChange","label","map","severity","justifyContent","flexWrap","color","textAlign","size","state","container","spacing","item","xs","md","allergies","dense","filter","trim","allergy","index","chronicIllnesses","illness","vaccinations","vaccine","vaccineName","vaccinationDate","notes","medicalHistory","visionStatus","hearingStatus","specialNeeds","physicalLimitations","mentalHealthConcerns","dietaryRestrictions","emergencyContacts","contact","name","relationship","phone","isEmergency","to"],"sources":["C:/Users/trand/OneDrive/Documents/GitHub/SchoolMedicalManagement/SchoolMedicalManagement/frontend/src/pages/parent/StudentHealthProfilePage.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { \r\n    Typography, \r\n    Paper, \r\n    CircularProgress, \r\n    Alert, \r\n    Container,\r\n    Button,\r\n    Box,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    Divider,\r\n    Card,\r\n    CardContent,\r\n    Grid,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Chip\r\n} from '@mui/material';\r\nimport { \r\n    ArrowBack as ArrowBackIcon,\r\n    Vaccines as VaccinesIcon, \r\n    MedicalServices as MedicalIcon,\r\n    Visibility as VisibilityIcon,\r\n    CalendarToday as DateIcon,\r\n    WarningAmber as AllergiesIcon,\r\n    HealthAndSafety as HealthIcon,\r\n    AccessibilityNew as PhysicalIcon,\r\n    Psychology as MentalIcon,\r\n    Restaurant as DietaryIcon,\r\n    MedicationLiquid as MedicationIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\n\r\n// Helper function to format dates\r\nconst formatDate = (dateString) => {\r\n  if (!dateString) return 'Not provided';\r\n  const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n  return new Date(dateString).toLocaleDateString(undefined, options);\r\n};\r\n\r\nconst StudentHealthProfilePage = () => {\r\n    const [healthProfile, setHealthProfile] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [selectedStudent, setSelectedStudent] = useState('');\r\n    const [children, setChildren] = useState([]);\r\n    const { currentUser } = useContext(AuthContext);\r\n    const navigate = useNavigate();\r\n\r\n    // Fetch children list\r\n    useEffect(() => {\r\n        const fetchChildren = async () => {\r\n            if (currentUser?.username) {\r\n                try {\r\n                    const token = localStorage.getItem('token');\r\n                    const response = await axios.get('/api/parent/students', {\r\n                        headers: { Authorization: `Bearer ${token}` }\r\n                    });\r\n                    setChildren(response.data || []);\r\n                    \r\n                    // If there's only one child, select it automatically\r\n                    if (response.data?.length === 1) {\r\n                        setSelectedStudent(response.data[0].studentCode);\r\n                    }\r\n                } catch (err) {\r\n                    console.error('Error fetching children:', err);\r\n                    setError('Failed to fetch children. Please try again later.');\r\n                }\r\n            }\r\n        };\r\n        \r\n        fetchChildren();\r\n    }, [currentUser]);\r\n\r\n    // Fetch student health profile when a student is selected\r\n    useEffect(() => {\r\n        const fetchHealthProfile = async () => {\r\n            if (selectedStudent) {\r\n                setLoading(true);\r\n                setError(null);\r\n                try {\r\n                    const token = localStorage.getItem('token');\r\n                    \r\n                    // First, try to get the latest approved health declaration\r\n                    const declarationsResponse = await axios.get(`/api/health-declaration/history?studentCode=${selectedStudent}`, {\r\n                        headers: { Authorization: `Bearer ${token}` }\r\n                    });\r\n                    \r\n                    const declarations = declarationsResponse.data || [];\r\n                      // Find the latest approved declaration if any (handling different status formats)\r\n                    const latestApprovedDeclaration = declarations.find(\r\n                        d => d.status && ['approved', 'APPROVED', 'Approved'].includes(d.status)\r\n                    ) || declarations[0]; // Fallback to the first declaration if none is approved\r\n                      if (latestApprovedDeclaration) {                        // Get student details from the children array instead of making a separate API call\r\n                        const selectedChild = children.find(child => child.studentCode === selectedStudent);\r\n                        const studentDetails = {\r\n                            fullName: selectedChild?.fullName || 'Student',\r\n                            studentCode: selectedStudent,\r\n                            ...selectedChild // Include other properties if available\r\n                        };\r\n                        \r\n                        // Combine data to create a complete health profile\r\n                        setHealthProfile({\r\n                            studentDetails: studentDetails,\r\n                            healthData: latestApprovedDeclaration,\r\n                            latestDeclarationDate: latestApprovedDeclaration.declarationDate || new Date().toISOString(),\r\n                            declarations: declarations\r\n                        });\r\n                    } else {\r\n                        setHealthProfile(null);\r\n                    }\r\n                } catch (err) {\r\n                    console.error('Error fetching health profile:', err);\r\n                    setError('Failed to fetch health record. Please try again later.');\r\n                } finally {\r\n                    setLoading(false);\r\n                }\r\n            } else {\r\n                setHealthProfile(null);\r\n                setLoading(false);\r\n            }\r\n        };\r\n        \r\n        fetchHealthProfile();\r\n    }, [selectedStudent]);\r\n\r\n    // Handle student selection change\r\n    const handleStudentChange = (event) => {\r\n        setSelectedStudent(event.target.value);\r\n    };\r\n\r\n    // Navigate back to parent dashboard\r\n    const handleBack = () => {\r\n        navigate('/parent/dashboard');\r\n    };\r\n\r\n    // Helper to render list items for health data\r\n    const renderListItem = (icon, primary, secondary = null) => (\r\n        <ListItem>\r\n            <ListItemIcon>{icon}</ListItemIcon>\r\n            <ListItemText \r\n                primary={primary} \r\n                secondary={secondary} \r\n            />\r\n        </ListItem>\r\n    );\r\n\r\n    // Helper to render info section\r\n    const renderInfoSection = (title, content, icon) => (\r\n        <Card variant=\"outlined\" sx={{ mb: 3 }}>\r\n            <CardContent>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                    {icon}\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ ml: 1 }}>\r\n                        {title}\r\n                    </Typography>\r\n                </Box>\r\n                <Divider sx={{ mb: 2 }} />\r\n                {content}\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 4 }}>\r\n                <Button \r\n                    startIcon={<ArrowBackIcon />} \r\n                    onClick={handleBack}\r\n                    sx={{ mr: 2 }}\r\n                >\r\n                    Back\r\n                </Button>\r\n                <Typography variant=\"h4\" component=\"h1\" sx={{ flexGrow: 1 }}>\r\n                    Student Health Profile\r\n                </Typography>\r\n            </Box>\r\n            \r\n            <Paper elevation={2} sx={{ p: 3, mb: 4 }}>\r\n                <Box sx={{ mb: 3 }}>\r\n                    <Typography variant=\"body1\" paragraph>\r\n                        View your child's comprehensive health profile. This information is compiled from the latest approved health declaration.\r\n                    </Typography>\r\n                    \r\n                    <FormControl fullWidth variant=\"outlined\" sx={{ mt: 2 }}>\r\n                        <InputLabel>Select Child</InputLabel>\r\n                        <Select\r\n                            value={selectedStudent}\r\n                            onChange={handleStudentChange}\r\n                            label=\"Select Child\"\r\n                        >\r\n                            <MenuItem value=\"\">\r\n                                <em>-- Select a child --</em>\r\n                            </MenuItem>\r\n                            {children.map((child) => (\r\n                                <MenuItem key={child.studentCode} value={child.studentCode}>\r\n                                    {child.fullName}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </Box>\r\n                \r\n                {!selectedStudent && (\r\n                    <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                        Please select a child to view their health profile.\r\n                    </Alert>\r\n                )}\r\n                \r\n                {selectedStudent && loading && (\r\n                    <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n                        <CircularProgress />\r\n                    </Box>\r\n                )}\r\n                \r\n                {selectedStudent && error && (\r\n                    <Alert severity=\"error\" sx={{ mt: 2 }}>\r\n                        {error}\r\n                    </Alert>\r\n                )}\r\n                \r\n                {selectedStudent && !loading && !error && (\r\n                    <>\r\n                        {healthProfile ? (\r\n                            <Box>\r\n                                {/* Student Info and Last Update */}\r\n                                <Card sx={{ mb: 3 }}>\r\n                                    <CardContent>\r\n                                        <Box sx={{ display: 'flex', justifyContent: 'space-between', flexWrap: 'wrap' }}>\r\n                                            <Box>\r\n                                                <Typography variant=\"h5\" component=\"div\">\r\n                                                    {healthProfile.studentDetails?.fullName || 'Student'}\r\n                                                </Typography>\r\n                                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                                    Student Code: {selectedStudent}\r\n                                                </Typography>\r\n                                            </Box>\r\n                                            <Box sx={{ textAlign: 'right' }}>\r\n                                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                                    Last Updated: {formatDate(healthProfile.latestDeclarationDate)}\r\n                                                </Typography>                                                <Button \r\n                                                    variant=\"text\" \r\n                                                    size=\"small\" \r\n                                                    onClick={() => navigate('/parent/health-declaration', { state: { studentCode: selectedStudent } })}\r\n                                                    startIcon={<HealthIcon />}\r\n                                                    sx={{ mt: 1 }}\r\n                                                >\r\n                                                    Update Health Information\r\n                                                </Button>\r\n                                            </Box>\r\n                                        </Box>\r\n                                    </CardContent>\r\n                                </Card>\r\n                                \r\n                                {/* Health Profile Sections */}\r\n                                <Grid container spacing={3}>\r\n                                    <Grid item xs={12} md={6}>\r\n                                        {/* Allergies */}\r\n                                        {renderInfoSection(\r\n                                            'Allergies',\r\n                                            healthProfile.healthData.allergies && healthProfile.healthData.allergies.length > 0 ? (\r\n                                                <List dense>\r\n                                                    {healthProfile.healthData.allergies\r\n                                                        .filter(item => item && item.trim())\r\n                                                        .map((allergy, index) => (\r\n                                                            <ListItem key={index}>\r\n                                                                <ListItemIcon>\r\n                                                                    <AllergiesIcon color=\"error\" />\r\n                                                                </ListItemIcon>\r\n                                                                <ListItemText primary={allergy} />\r\n                                                            </ListItem>\r\n                                                        ))\r\n                                                    }\r\n                                                </List>\r\n                                            ) : (\r\n                                                <Typography variant=\"body2\">No allergies recorded</Typography>\r\n                                            ),\r\n                                            <AllergiesIcon color=\"warning\" />\r\n                                        )}\r\n                                        \r\n                                        {/* Chronic Illnesses */}\r\n                                        {renderInfoSection(\r\n                                            'Chronic Illnesses',\r\n                                            healthProfile.healthData.chronicIllnesses && healthProfile.healthData.chronicIllnesses.length > 0 ? (\r\n                                                <List dense>\r\n                                                    {healthProfile.healthData.chronicIllnesses\r\n                                                        .filter(item => item && item.trim())\r\n                                                        .map((illness, index) => (\r\n                                                            <ListItem key={index}>\r\n                                                                <ListItemIcon>\r\n                                                                    <MedicalIcon color=\"primary\" />\r\n                                                                </ListItemIcon>\r\n                                                                <ListItemText primary={illness} />\r\n                                                            </ListItem>\r\n                                                        ))\r\n                                                    }\r\n                                                </List>\r\n                                            ) : (\r\n                                                <Typography variant=\"body2\">No chronic illnesses recorded</Typography>\r\n                                            ),\r\n                                            <MedicalIcon color=\"primary\" />\r\n                                        )}\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item xs={12} md={6}>\r\n                                        {/* Vaccinations */}\r\n                                        {renderInfoSection(\r\n                                            'Vaccinations',\r\n                                            healthProfile.healthData.vaccinations && healthProfile.healthData.vaccinations.length > 0 ? (\r\n                                                <List dense>\r\n                                                    {healthProfile.healthData.vaccinations.map((vaccine, index) => (\r\n                                                        <ListItem key={index}>\r\n                                                            <ListItemIcon>\r\n                                                                <VaccinesIcon color=\"success\" />\r\n                                                            </ListItemIcon>\r\n                                                            <ListItemText \r\n                                                                primary={vaccine.vaccineName} \r\n                                                                secondary={`Date: ${formatDate(vaccine.vaccinationDate)}${vaccine.notes ? ` - ${vaccine.notes}` : ''}`}\r\n                                                            />\r\n                                                        </ListItem>\r\n                                                    ))}\r\n                                                </List>\r\n                                            ) : (\r\n                                                <Typography variant=\"body2\">No vaccination records</Typography>\r\n                                            ),\r\n                                            <VaccinesIcon color=\"success\" />\r\n                                        )}\r\n                                    </Grid>\r\n                                    \r\n                                    {/* Medical History */}\r\n                                    <Grid item xs={12}>\r\n                                        {renderInfoSection(\r\n                                            'Medical History',\r\n                                            healthProfile.healthData.medicalHistory ? (\r\n                                                <Typography variant=\"body1\">\r\n                                                    {healthProfile.healthData.medicalHistory}\r\n                                                </Typography>\r\n                                            ) : (\r\n                                                <Typography variant=\"body2\">No medical history provided</Typography>\r\n                                            ),\r\n                                            <MedicalIcon color=\"primary\" />\r\n                                        )}\r\n                                    </Grid>\r\n                                    \r\n                                    {/* Health Status */}\r\n                                    <Grid item xs={12} md={6}>\r\n                                        {renderInfoSection(\r\n                                            'Health Status',\r\n                                            <List dense>\r\n                                                {healthProfile.healthData.visionStatus && renderListItem(\r\n                                                    <VisibilityIcon />,\r\n                                                    'Vision Status',\r\n                                                    healthProfile.healthData.visionStatus\r\n                                                )}\r\n                                                \r\n                                                {healthProfile.healthData.hearingStatus && renderListItem(\r\n                                                    <HealthIcon />,\r\n                                                    'Hearing Status',\r\n                                                    healthProfile.healthData.hearingStatus\r\n                                                )}\r\n                                                \r\n                                                {healthProfile.healthData.specialNeeds && renderListItem(\r\n                                                    <HealthIcon />,\r\n                                                    'Special Needs',\r\n                                                    healthProfile.healthData.specialNeeds\r\n                                                )}\r\n                                                \r\n                                                {healthProfile.healthData.physicalLimitations && renderListItem(\r\n                                                    <PhysicalIcon />,\r\n                                                    'Physical Limitations',\r\n                                                    healthProfile.healthData.physicalLimitations\r\n                                                )}\r\n                                                \r\n                                                {healthProfile.healthData.mentalHealthConcerns && renderListItem(\r\n                                                    <MentalIcon />,\r\n                                                    'Mental Health Concerns',\r\n                                                    healthProfile.healthData.mentalHealthConcerns\r\n                                                )}\r\n                                                \r\n                                                {healthProfile.healthData.dietaryRestrictions && renderListItem(\r\n                                                    <DietaryIcon />,\r\n                                                    'Dietary Restrictions',\r\n                                                    healthProfile.healthData.dietaryRestrictions\r\n                                                )}\r\n                                            </List>,\r\n                                            <HealthIcon color=\"primary\" />\r\n                                        )}\r\n                                    </Grid>\r\n                                    \r\n                                    {/* Emergency Contacts */}\r\n                                    <Grid item xs={12} md={6}>\r\n                                        {renderInfoSection(\r\n                                            'Emergency Contacts',\r\n                                            healthProfile.healthData.emergencyContacts && healthProfile.healthData.emergencyContacts.length > 0 ? (\r\n                                                <List dense>\r\n                                                    {healthProfile.healthData.emergencyContacts.map((contact, index) => (\r\n                                                        <ListItem key={index}>\r\n                                                            <ListItemText \r\n                                                                primary={contact.name}\r\n                                                                secondary={\r\n                                                                    <>\r\n                                                                        {contact.relationship && <span>Relationship: {contact.relationship}<br /></span>}\r\n                                                                        {contact.phone && <span>Phone: {contact.phone}<br /></span>}\r\n                                                                        {contact.isEmergency && <Chip label=\"Emergency Contact\" size=\"small\" color=\"error\" sx={{ mt: 0.5 }} />}\r\n                                                                    </>\r\n                                                                }\r\n                                                            />\r\n                                                        </ListItem>\r\n                                                    ))}\r\n                                                </List>\r\n                                            ) : (\r\n                                                <Typography variant=\"body2\">No emergency contacts provided</Typography>\r\n                                            ),\r\n                                            <MedicalIcon color=\"error\" />\r\n                                        )}\r\n                                    </Grid>\r\n                                </Grid>\r\n                                \r\n                                {/* Health Declarations History */}\r\n                                <Box sx={{ mt: 4 }}>\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        component={Link}\r\n                                        to=\"/parent/health-records\"\r\n                                        startIcon={<DateIcon />}\r\n                                    >\r\n                                        View Health Declaration History\r\n                                    </Button>\r\n                                </Box>\r\n                            </Box>\r\n                        ) : (\r\n                            <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                                No health profile available for this student. Please submit a health declaration to establish a health profile.\r\n                                <Box sx={{ mt: 2 }}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        component={Link}\r\n                                        to={`/parent/health-declaration?studentCode=${selectedStudent}`}\r\n                                        startIcon={<MedicalIcon />}\r\n                                    >\r\n                                        Create Health Declaration\r\n                                    </Button>\r\n                                </Box>\r\n                            </Alert>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </Paper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default StudentHealthProfilePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}