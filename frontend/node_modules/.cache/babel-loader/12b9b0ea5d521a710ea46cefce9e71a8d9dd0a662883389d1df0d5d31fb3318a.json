{"ast":null,"code":"import React,{useState,useEffect,Fragment}from'react';import{TextField,Button,Grid,Typography,Paper,FormControl,InputLabel,Select,MenuItem,FormHelperText,Chip,OutlinedInput,Box,Snackbar,Alert,CircularProgress}from'@mui/material';import axios from'axios';import apiClient,{getAllHealthCheckupTypes,getAllVaccines}from'../../utils/api';import GradeLevelSelector from'../shared/GradeLevelSelector';import{useUIText}from'../../hooks/useUIText';import{useGradeLevels}from'../../hooks/useGradeLevels';import{useAuth}from'../../context/AuthContext';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const HealthEventForm=_ref=>{let{onSubmit,initialData,isEdit=false}=_ref;const{t}=useUIText();const{gradeLevels,loading:gradeLevelsLoading,formatGradeNumbersToString,parseGradeLevelsString}=useGradeLevels();const{currentUser,loading:authLoading}=useAuth();const[formData,setFormData]=useState({eventName:'',eventType:'HEALTH_CHECKUP',description:'',startDate:'',endDate:'',location:'',typesOfCheckups:[],// Ensure this is always an array\nselectedVaccines:[],// Add vaccines array for vaccination events\ntargetGradeNames:[]// Changed to use names for backend compatibility\n});const[vaccines,setVaccines]=useState([]);const[vaccinesLoading,setVaccinesLoading]=useState(false);const[healthCheckupTypes,setHealthCheckupTypes]=useState([]);const[checkupTypesLoading,setCheckupTypesLoading]=useState(false);const[loading,setLoading]=useState(false);const[snackbarOpen,setSnackbarOpen]=useState(false);const[snackbarMessage,setSnackbarMessage]=useState('');const[snackbarSeverity,setSnackbarSeverity]=useState('success');// Fetch vaccines from API\nconst fetchVaccines=async()=>{try{setVaccinesLoading(true);const response=await getAllVaccines();if(response&&Array.isArray(response)&&response.length>0){setVaccines(response);}else{// Fallback vaccines data\nconst fallbackVaccines=[{vaccineId:1,name:'MMR',diseaseTargeted:'Measles, Mumps, Rubella'},{vaccineId:2,name:'DTaP',diseaseTargeted:'Diphtheria, Tetanus, Pertussis'},{vaccineId:3,name:'Polio (IPV)',diseaseTargeted:'Poliomyelitis'},{vaccineId:4,name:'Hepatitis B',diseaseTargeted:'Hepatitis B'},{vaccineId:5,name:'Varicella',diseaseTargeted:'Chickenpox'},{vaccineId:6,name:'Influenza',diseaseTargeted:'Seasonal Flu'},{vaccineId:7,name:'HPV',diseaseTargeted:'Human Papillomavirus'},{vaccineId:8,name:'COVID-19',diseaseTargeted:'COVID-19'}];setVaccines(fallbackVaccines);}}catch(error){console.error('Error fetching vaccines:',error);// Use fallback data when API fails\nconst fallbackVaccines=[{vaccineId:1,name:'MMR',diseaseTargeted:'Measles, Mumps, Rubella'},{vaccineId:2,name:'DTaP',diseaseTargeted:'Diphtheria, Tetanus, Pertussis'},{vaccineId:3,name:'Polio (IPV)',diseaseTargeted:'Poliomyelitis'},{vaccineId:4,name:'Hepatitis B',diseaseTargeted:'Hepatitis B'},{vaccineId:5,name:'Varicella',diseaseTargeted:'Chickenpox'},{vaccineId:6,name:'Influenza',diseaseTargeted:'Seasonal Flu'},{vaccineId:7,name:'HPV',diseaseTargeted:'Human Papillomavirus'},{vaccineId:8,name:'COVID-19',diseaseTargeted:'COVID-19'}];setVaccines(fallbackVaccines);setSnackbarMessage('Using default vaccines list (API connection failed)');setSnackbarSeverity('warning');setSnackbarOpen(true);}finally{setVaccinesLoading(false);}};// Fetch health checkup types from API\nconst fetchHealthCheckupTypes=async()=>{try{setCheckupTypesLoading(true);// Try to fetch from API first\ntry{const response=await getAllHealthCheckupTypes();const transformedTypes=(response===null||response===void 0?void 0:response.map(type=>({value:type.checkupTypeId,// Use ID as value\nlabel:type.typeName,description:type.description})))||[];if(transformedTypes.length>0){setHealthCheckupTypes(transformedTypes);return;}}catch(apiError){}// Fallback to hardcoded data if API fails\nconst fallbackTypes=[{value:1,label:'General Physical Examination',description:'Comprehensive physical health checkup'},{value:2,label:'Vision Test',description:'Eye sight and vision assessment'},{value:3,label:'Hearing Test',description:'Hearing ability assessment'},{value:4,label:'Height and Weight Measurement',description:'Growth and development tracking'},{value:5,label:'Blood Pressure Check',description:'Cardiovascular health monitoring'},{value:6,label:'Dental Examination',description:'Oral health and dental checkup'},{value:7,label:'Basic Health Screening',description:'Basic general health screening'},{value:8,label:'Vaccination Check',description:'Immunization status verification'},{value:9,label:'Mental Health Assessment',description:'Psychological wellbeing evaluation'},{value:10,label:'Sports Physical',description:'Sports participation health clearance'}];setHealthCheckupTypes(fallbackTypes);}catch(error){console.error('Error fetching health checkup types:',error);setSnackbarMessage('Failed to load health checkup types');setSnackbarSeverity('error');setSnackbarOpen(true);// Fallback to empty array if everything fails\nsetHealthCheckupTypes([]);}finally{setCheckupTypesLoading(false);}};// Fetch vaccines and checkup types when component mounts and user is authenticated\nuseEffect(()=>{if(currentUser&&!authLoading){fetchVaccines();fetchHealthCheckupTypes();}},[currentUser,authLoading]);useEffect(()=>{if(initialData&&gradeLevels.length>0){// Handle targetGradeNames - convert from existing data\nlet targetGradeNames=[];if(initialData.targetGradeNames&&Array.isArray(initialData.targetGradeNames)){targetGradeNames=initialData.targetGradeNames;}else if(initialData.targetGradeIds&&Array.isArray(initialData.targetGradeIds)){// Convert grade IDs to names if needed\ntargetGradeNames=initialData.targetGradeIds.map(id=>{const gradeLevel=gradeLevels.find(gl=>gl.gradeId===id);return gradeLevel?gradeLevel.gradeName:null;}).filter(name=>name!==null);}else if(typeof initialData.targetGradeLevels==='string'&&initialData.targetGradeLevels){// Legacy support for string format\nconst gradeNumbers=parseGradeLevelsString(initialData.targetGradeLevels);targetGradeNames=gradeNumbers.map(gradeNum=>`Grade ${gradeNum}`);}// Handle dates - support both scheduledDate and startDate/endDate\nlet startDate='';let endDate='';if(initialData.scheduledDate){// If scheduledDate exists, use it for both start and end\nconst dateStr=typeof initialData.scheduledDate==='string'?initialData.scheduledDate.split('T')[0]:initialData.scheduledDate;startDate=dateStr;endDate=dateStr;}else{// Use individual start/end dates if available\nstartDate=initialData.startDate?typeof initialData.startDate==='string'?initialData.startDate.split('T')[0]:initialData.startDate:'';endDate=initialData.endDate?typeof initialData.endDate==='string'?initialData.endDate.split('T')[0]:initialData.endDate:'';}setFormData({eventName:initialData.eventName||'',eventType:initialData.eventType||'HEALTH_CHECKUP',description:initialData.description||'',startDate:startDate,endDate:endDate,location:initialData.location||'',typesOfCheckups:Array.isArray(initialData.typesOfCheckups)?initialData.typesOfCheckups:[],// Ensure it's always an array\nselectedVaccines:Array.isArray(initialData.selectedVaccines)?initialData.selectedVaccines:[],// Handle selected vaccines\ntargetGradeNames:targetGradeNames});}},[initialData,gradeLevels,parseGradeLevelsString]);const handleChange=e=>{const{name,value}=e.target;setFormData(prev=>({...prev,[name]:value}));};const handleGradeLevelsChange=selectedGrades=>{setFormData(prev=>({...prev,targetGradeNames:selectedGrades}));};const handleSubmit=e=>{e.preventDefault();try{// Basic validation\nif(!formData.eventName||!formData.startDate||!formData.endDate){setSnackbarMessage('Event name, start date and end date are required.');setSnackbarSeverity('error');setSnackbarOpen(true);return;}if(!formData.targetGradeNames||formData.targetGradeNames.length===0){setSnackbarMessage('At least one target grade level must be selected.');setSnackbarSeverity('error');setSnackbarOpen(true);return;}// Validate typesOfCheckups only for HEALTH_CHECKUP events\nif(formData.eventType==='HEALTH_CHECKUP'){if(!formData.typesOfCheckups||formData.typesOfCheckups.length===0){setSnackbarMessage('At least one checkup type must be selected for health checkup events.');setSnackbarSeverity('error');setSnackbarOpen(true);return;}}// Validate selectedVaccines only for VACCINATION events\nif(formData.eventType==='VACCINATION'){if(!formData.selectedVaccines||formData.selectedVaccines.length===0){setSnackbarMessage('At least one vaccine type must be selected for vaccination events.');setSnackbarSeverity('error');setSnackbarOpen(true);return;}}// Prepare data for submission - targetGradeIds is already in correct format\nconst finalData={...formData};// Remove typesOfCheckups if not needed (for VACCINATION events)\nif(formData.eventType!=='HEALTH_CHECKUP'){delete finalData.typesOfCheckups;}// Remove selectedVaccines if not needed (for HEALTH_CHECKUP events) \nif(formData.eventType!=='VACCINATION'){delete finalData.selectedVaccines;}// Rename fields to match backend DTO\nfinalData.scheduledDate=finalData.startDate;// Map startDate to scheduledDate\nonSubmit(finalData);}catch(error){console.error('Error in form submission:',error);setSnackbarMessage('An error occurred while submitting the form. Please try again.');setSnackbarSeverity('error');setSnackbarOpen(true);}};// Close notification\nconst handleCloseSnackbar=()=>{setSnackbarOpen(false);};// Get health checkup types from state (loaded from API)\nconst getHealthCheckupTypes=()=>{return healthCheckupTypes;};return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsxs(Paper,{elevation:3,sx:{p:3,mt:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",gutterBottom:true,children:isEdit?'Edit Event':'Create New Event'}),gradeLevelsLoading?/*#__PURE__*/_jsxs(Box,{display:\"flex\",justifyContent:\"center\",p:3,children:[/*#__PURE__*/_jsx(CircularProgress,{}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",sx:{ml:2},children:\"Loading grade levels...\"})]}):/*#__PURE__*/_jsx(\"form\",{onSubmit:handleSubmit,children:/*#__PURE__*/_jsxs(Grid,{container:true,spacing:2,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(TextField,{label:\"Event Name\",name:\"eventName\",value:formData.eventName,onChange:handleChange,fullWidth:true,required:true})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,required:true,children:[/*#__PURE__*/_jsx(InputLabel,{id:\"event-type-label\",children:\"Event Type\"}),/*#__PURE__*/_jsxs(Select,{labelId:\"event-type-label\",id:\"eventType\",name:\"eventType\",value:formData.eventType,onChange:handleChange,label:\"Event Type\",children:[/*#__PURE__*/_jsx(MenuItem,{value:\"HEALTH_CHECKUP\",children:\"General Health Checkup\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"VACCINATION\",children:\"Vaccination\"})]})]})}),/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,children:[/*#__PURE__*/_jsx(TextField,{label:formData.eventType==='VACCINATION'?'Vaccine Description':'Description',name:\"description\",value:formData.description,onChange:handleChange,multiline:true,rows:3,fullWidth:true,placeholder:formData.eventType==='VACCINATION'?'Enter vaccine description or details':'Enter event description',helperText:formData.eventType==='VACCINATION'?'Provide details about the vaccination event':'Provide details about the health event'}),formData.eventType==='VACCINATION'&&/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,sx:{mt:2},children:[/*#__PURE__*/_jsx(InputLabel,{id:\"vaccines-select-label\",children:\"Select Vaccines\"}),/*#__PURE__*/_jsx(Select,{labelId:\"vaccines-select-label\",multiple:true,value:Array.isArray(formData.selectedVaccines)?formData.selectedVaccines:[],onChange:e=>{const selectedVaccines=Array.isArray(e.target.value)?e.target.value:[];setFormData(prev=>({...prev,selectedVaccines:selectedVaccines}));},input:/*#__PURE__*/_jsx(OutlinedInput,{label:\"Select Vaccines\"}),renderValue:selected=>/*#__PURE__*/_jsx(Box,{sx:{display:'flex',flexWrap:'wrap',gap:0.5},children:selected.map(vaccineId=>{const vaccine=vaccines.find(vac=>vac.vaccineId.toString()===vaccineId);const label=vaccine?vaccine.name:vaccineId;return/*#__PURE__*/_jsx(Chip,{label:label,size:\"small\"},vaccineId);})}),disabled:vaccinesLoading,children:vaccinesLoading?/*#__PURE__*/_jsxs(MenuItem,{disabled:true,children:[/*#__PURE__*/_jsx(CircularProgress,{size:20}),/*#__PURE__*/_jsx(Typography,{sx:{ml:1},children:\"Loading vaccines...\"})]}):vaccines.map(vaccine=>/*#__PURE__*/_jsx(MenuItem,{value:vaccine.vaccineId.toString(),children:/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[/*#__PURE__*/_jsx(\"strong\",{children:vaccine.name}),vaccine.diseaseTargeted&&/*#__PURE__*/_jsxs(Typography,{component:\"span\",variant:\"caption\",color:\"text.secondary\",children:[' - ',vaccine.diseaseTargeted]})]})},vaccine.vaccineId))}),/*#__PURE__*/_jsx(FormHelperText,{children:vaccinesLoading?'Loading vaccines from database...':'Select one or more vaccines from the database'})]}),formData.eventType==='HEALTH_CHECKUP'&&/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,sx:{mt:2},children:[/*#__PURE__*/_jsx(InputLabel,{id:\"checkup-types-label\",children:\"Checkup Types\"}),/*#__PURE__*/_jsx(Select,{labelId:\"checkup-types-label\",multiple:true,value:Array.isArray(formData.typesOfCheckups)?formData.typesOfCheckups:[],onChange:e=>setFormData({...formData,typesOfCheckups:Array.isArray(e.target.value)?e.target.value:[]}),input:/*#__PURE__*/_jsx(OutlinedInput,{label:\"Checkup Types\"}),disabled:checkupTypesLoading,renderValue:selected=>{// Ensure selected is an array before mapping\nconst selectedArray=Array.isArray(selected)?selected:[];return/*#__PURE__*/_jsx(Box,{sx:{display:'flex',flexWrap:'wrap',gap:0.5},children:selectedArray.map(value=>{const type=getHealthCheckupTypes().find(t=>t.value===value);return/*#__PURE__*/_jsx(Chip,{label:type?type.label:value},value);})});},children:checkupTypesLoading?/*#__PURE__*/_jsxs(MenuItem,{disabled:true,children:[/*#__PURE__*/_jsx(CircularProgress,{size:20,sx:{mr:1}}),/*#__PURE__*/_jsx(Typography,{sx:{ml:1},children:\"Loading checkup types...\"})]}):getHealthCheckupTypes().map(type=>/*#__PURE__*/_jsx(MenuItem,{value:type.value,children:/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[/*#__PURE__*/_jsx(\"strong\",{children:type.label}),type.description&&/*#__PURE__*/_jsx(Typography,{component:\"span\",variant:\"caption\",color:\"text.secondary\",display:\"block\",children:type.description})]})},type.value))}),/*#__PURE__*/_jsx(FormHelperText,{children:checkupTypesLoading?'Loading checkup types from database...':'Select one or more checkup types from the database'})]})})]}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:6,children:/*#__PURE__*/_jsx(TextField,{label:\"Start Date\",name:\"startDate\",type:\"date\",value:formData.startDate,onChange:handleChange,InputLabelProps:{shrink:true},fullWidth:true,required:true})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:6,children:/*#__PURE__*/_jsx(TextField,{label:\"End Date\",name:\"endDate\",type:\"date\",value:formData.endDate,onChange:handleChange,InputLabelProps:{shrink:true},fullWidth:true,required:true})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(TextField,{label:\"Location\",name:\"location\",value:formData.location,onChange:handleChange,fullWidth:true})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(GradeLevelSelector,{value:formData.targetGradeNames,onChange:handleGradeLevelsChange,multiple:true,label:t.targetGradeLevels,helperText:\"Select one or more grade levels for this event (Grades 1-12 available)\",required:true,sx:{mb:2}})}),formData.eventType==='HEALTH_CHECKUP'&&/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle1\",color:\"primary\",gutterBottom:true,children:/*#__PURE__*/_jsx(\"strong\",{children:\"Automatic Notification:\"})}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",children:\"Health checkup events will automatically appear in the \\\"Upcoming Checkups\\\" section for parents\"})]}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sx:{mt:2},children:/*#__PURE__*/_jsx(Button,{type:\"submit\",variant:\"contained\",color:\"primary\",children:isEdit?'Save Changes':'Create Event'})})]})})]}),/*#__PURE__*/_jsx(Snackbar,{open:snackbarOpen,autoHideDuration:3000,onClose:handleCloseSnackbar,children:/*#__PURE__*/_jsx(Alert,{onClose:handleCloseSnackbar,severity:snackbarSeverity,sx:{width:'100%'},children:snackbarMessage})})]});};export default HealthEventForm;","map":{"version":3,"names":["React","useState","useEffect","Fragment","TextField","Button","Grid","Typography","Paper","FormControl","InputLabel","Select","MenuItem","FormHelperText","Chip","OutlinedInput","Box","Snackbar","Alert","CircularProgress","axios","apiClient","getAllHealthCheckupTypes","getAllVaccines","GradeLevelSelector","useUIText","useGradeLevels","useAuth","jsx","_jsx","jsxs","_jsxs","_Fragment","HealthEventForm","_ref","onSubmit","initialData","isEdit","t","gradeLevels","loading","gradeLevelsLoading","formatGradeNumbersToString","parseGradeLevelsString","currentUser","authLoading","formData","setFormData","eventName","eventType","description","startDate","endDate","location","typesOfCheckups","selectedVaccines","targetGradeNames","vaccines","setVaccines","vaccinesLoading","setVaccinesLoading","healthCheckupTypes","setHealthCheckupTypes","checkupTypesLoading","setCheckupTypesLoading","setLoading","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","fetchVaccines","response","Array","isArray","length","fallbackVaccines","vaccineId","name","diseaseTargeted","error","console","fetchHealthCheckupTypes","transformedTypes","map","type","value","checkupTypeId","label","typeName","apiError","fallbackTypes","targetGradeIds","id","gradeLevel","find","gl","gradeId","gradeName","filter","targetGradeLevels","gradeNumbers","gradeNum","scheduledDate","dateStr","split","handleChange","e","target","prev","handleGradeLevelsChange","selectedGrades","handleSubmit","preventDefault","finalData","handleCloseSnackbar","getHealthCheckupTypes","children","elevation","sx","p","mt","variant","gutterBottom","display","justifyContent","ml","container","spacing","item","xs","onChange","fullWidth","required","labelId","multiline","rows","placeholder","helperText","multiple","input","renderValue","selected","flexWrap","gap","vaccine","vac","toString","size","disabled","component","color","selectedArray","mr","sm","InputLabelProps","shrink","mb","open","autoHideDuration","onClose","severity","width"],"sources":["C:/Users/trand/OneDrive/Documents/GitHub/SchoolMedicalManagement/frontend/src/components/healthcheckup/HealthEventForm.js"],"sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\r\nimport { TextField, Button, Grid, Typography, Paper, FormControl, InputLabel, Select, MenuItem, FormHelperText, Chip, OutlinedInput, Box, Snackbar, Alert, CircularProgress } from '@mui/material';\r\nimport axios from 'axios';\r\nimport apiClient, { getAllHealthCheckupTypes, getAllVaccines } from '../../utils/api';\r\nimport GradeLevelSelector from '../shared/GradeLevelSelector';\r\nimport { useUIText } from '../../hooks/useUIText';\r\nimport { useGradeLevels } from '../../hooks/useGradeLevels';\r\nimport { useAuth } from '../../context/AuthContext';\r\n\r\nconst HealthEventForm = ({ onSubmit, initialData, isEdit = false }) => {\r\n  const { t } = useUIText();\r\n  const { gradeLevels, loading: gradeLevelsLoading, formatGradeNumbersToString, parseGradeLevelsString } = useGradeLevels();\r\n  const { currentUser, loading: authLoading } = useAuth();\r\n  \r\n  const [formData, setFormData] = useState({\r\n    eventName: '',\r\n    eventType: 'HEALTH_CHECKUP',\r\n    description: '',\r\n    startDate: '',\r\n    endDate: '',\r\n    location: '',\r\n    typesOfCheckups: [], // Ensure this is always an array\r\n    selectedVaccines: [], // Add vaccines array for vaccination events\r\n    targetGradeNames: [] // Changed to use names for backend compatibility\r\n  });\r\n  \r\n  const [vaccines, setVaccines] = useState([]);\r\n  const [vaccinesLoading, setVaccinesLoading] = useState(false);\r\n  const [healthCheckupTypes, setHealthCheckupTypes] = useState([]);\r\n  const [checkupTypesLoading, setCheckupTypesLoading] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [snackbarSeverity, setSnackbarSeverity] = useState('success');\r\n\r\n  // Fetch vaccines from API\r\n  const fetchVaccines = async () => {\r\n    try {\r\n      setVaccinesLoading(true);\r\n      const response = await getAllVaccines();\r\n      \r\n      if (response && Array.isArray(response) && response.length > 0) {\r\n        setVaccines(response);\r\n      } else {\r\n        // Fallback vaccines data\r\n        const fallbackVaccines = [\r\n          { vaccineId: 1, name: 'MMR', diseaseTargeted: 'Measles, Mumps, Rubella' },\r\n          { vaccineId: 2, name: 'DTaP', diseaseTargeted: 'Diphtheria, Tetanus, Pertussis' },\r\n          { vaccineId: 3, name: 'Polio (IPV)', diseaseTargeted: 'Poliomyelitis' },\r\n          { vaccineId: 4, name: 'Hepatitis B', diseaseTargeted: 'Hepatitis B' },\r\n          { vaccineId: 5, name: 'Varicella', diseaseTargeted: 'Chickenpox' },\r\n          { vaccineId: 6, name: 'Influenza', diseaseTargeted: 'Seasonal Flu' },\r\n          { vaccineId: 7, name: 'HPV', diseaseTargeted: 'Human Papillomavirus' },\r\n          { vaccineId: 8, name: 'COVID-19', diseaseTargeted: 'COVID-19' }\r\n        ];\r\n        setVaccines(fallbackVaccines);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching vaccines:', error);\r\n      \r\n      // Use fallback data when API fails\r\n      const fallbackVaccines = [\r\n        { vaccineId: 1, name: 'MMR', diseaseTargeted: 'Measles, Mumps, Rubella' },\r\n        { vaccineId: 2, name: 'DTaP', diseaseTargeted: 'Diphtheria, Tetanus, Pertussis' },\r\n        { vaccineId: 3, name: 'Polio (IPV)', diseaseTargeted: 'Poliomyelitis' },\r\n        { vaccineId: 4, name: 'Hepatitis B', diseaseTargeted: 'Hepatitis B' },\r\n        { vaccineId: 5, name: 'Varicella', diseaseTargeted: 'Chickenpox' },\r\n        { vaccineId: 6, name: 'Influenza', diseaseTargeted: 'Seasonal Flu' },\r\n        { vaccineId: 7, name: 'HPV', diseaseTargeted: 'Human Papillomavirus' },\r\n        { vaccineId: 8, name: 'COVID-19', diseaseTargeted: 'COVID-19' }\r\n      ];\r\n      setVaccines(fallbackVaccines);\r\n      \r\n      setSnackbarMessage('Using default vaccines list (API connection failed)');\r\n      setSnackbarSeverity('warning');\r\n      setSnackbarOpen(true);\r\n    } finally {\r\n      setVaccinesLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch health checkup types from API\r\n  const fetchHealthCheckupTypes = async () => {\r\n    try {\r\n      setCheckupTypesLoading(true);\r\n      \r\n      // Try to fetch from API first\r\n      try {\r\n        const response = await getAllHealthCheckupTypes();\r\n        const transformedTypes = response?.map(type => ({\r\n          value: type.checkupTypeId, // Use ID as value\r\n          label: type.typeName,\r\n          description: type.description\r\n        })) || [];\r\n        \r\n        if (transformedTypes.length > 0) {\r\n          setHealthCheckupTypes(transformedTypes);\r\n          return;\r\n        }\r\n      } catch (apiError) {\r\n        }\r\n      \r\n      // Fallback to hardcoded data if API fails\r\n      const fallbackTypes = [\r\n        { value: 1, label: 'General Physical Examination', description: 'Comprehensive physical health checkup' },\r\n        { value: 2, label: 'Vision Test', description: 'Eye sight and vision assessment' },\r\n        { value: 3, label: 'Hearing Test', description: 'Hearing ability assessment' },\r\n        { value: 4, label: 'Height and Weight Measurement', description: 'Growth and development tracking' },\r\n        { value: 5, label: 'Blood Pressure Check', description: 'Cardiovascular health monitoring' },\r\n        { value: 6, label: 'Dental Examination', description: 'Oral health and dental checkup' },\r\n        { value: 7, label: 'Basic Health Screening', description: 'Basic general health screening' },\r\n        { value: 8, label: 'Vaccination Check', description: 'Immunization status verification' },\r\n        { value: 9, label: 'Mental Health Assessment', description: 'Psychological wellbeing evaluation' },\r\n        { value: 10, label: 'Sports Physical', description: 'Sports participation health clearance' }\r\n      ];\r\n      \r\n      setHealthCheckupTypes(fallbackTypes);\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching health checkup types:', error);\r\n      setSnackbarMessage('Failed to load health checkup types');\r\n      setSnackbarSeverity('error');\r\n      setSnackbarOpen(true);\r\n      // Fallback to empty array if everything fails\r\n      setHealthCheckupTypes([]);\r\n    } finally {\r\n      setCheckupTypesLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch vaccines and checkup types when component mounts and user is authenticated\r\n  useEffect(() => {\r\n    if (currentUser && !authLoading) {\r\n      fetchVaccines();\r\n      fetchHealthCheckupTypes();\r\n    }\r\n  }, [currentUser, authLoading]);\r\n  \r\n  useEffect(() => {\r\n    if (initialData && gradeLevels.length > 0) {\r\n      // Handle targetGradeNames - convert from existing data\r\n      let targetGradeNames = [];\r\n      if (initialData.targetGradeNames && Array.isArray(initialData.targetGradeNames)) {\r\n        targetGradeNames = initialData.targetGradeNames;\r\n      } else if (initialData.targetGradeIds && Array.isArray(initialData.targetGradeIds)) {\r\n        // Convert grade IDs to names if needed\r\n        targetGradeNames = initialData.targetGradeIds.map(id => {\r\n          const gradeLevel = gradeLevels.find(gl => gl.gradeId === id);\r\n          return gradeLevel ? gradeLevel.gradeName : null;\r\n        }).filter(name => name !== null);\r\n      } else if (typeof initialData.targetGradeLevels === 'string' && initialData.targetGradeLevels) {\r\n        // Legacy support for string format\r\n        const gradeNumbers = parseGradeLevelsString(initialData.targetGradeLevels);\r\n        targetGradeNames = gradeNumbers.map(gradeNum => `Grade ${gradeNum}`);\r\n      }\r\n      \r\n      // Handle dates - support both scheduledDate and startDate/endDate\r\n      let startDate = '';\r\n      let endDate = '';\r\n      \r\n      if (initialData.scheduledDate) {\r\n        // If scheduledDate exists, use it for both start and end\r\n        const dateStr = typeof initialData.scheduledDate === 'string' ? \r\n          initialData.scheduledDate.split('T')[0] : \r\n          initialData.scheduledDate;\r\n        startDate = dateStr;\r\n        endDate = dateStr;\r\n      } else {\r\n        // Use individual start/end dates if available\r\n        startDate = initialData.startDate ? \r\n          (typeof initialData.startDate === 'string' ? initialData.startDate.split('T')[0] : initialData.startDate) : '';\r\n        endDate = initialData.endDate ? \r\n          (typeof initialData.endDate === 'string' ? initialData.endDate.split('T')[0] : initialData.endDate) : '';\r\n      }\r\n      \r\n      setFormData({\r\n        eventName: initialData.eventName || '',\r\n        eventType: initialData.eventType || 'HEALTH_CHECKUP',\r\n        description: initialData.description || '',\r\n        startDate: startDate,\r\n        endDate: endDate,\r\n        location: initialData.location || '',\r\n        typesOfCheckups: Array.isArray(initialData.typesOfCheckups) ? initialData.typesOfCheckups : [], // Ensure it's always an array\r\n        selectedVaccines: Array.isArray(initialData.selectedVaccines) ? initialData.selectedVaccines : [], // Handle selected vaccines\r\n        targetGradeNames: targetGradeNames\r\n      });\r\n    }\r\n  }, [initialData, gradeLevels, parseGradeLevelsString]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n  };\r\n  \r\n  const handleGradeLevelsChange = (selectedGrades) => {\r\n    setFormData(prev => ({ ...prev, targetGradeNames: selectedGrades }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      // Basic validation\r\n      if (!formData.eventName || !formData.startDate || !formData.endDate) {\r\n        setSnackbarMessage('Event name, start date and end date are required.');\r\n        setSnackbarSeverity('error');\r\n        setSnackbarOpen(true);\r\n        return;\r\n      }\r\n      \r\n      if (!formData.targetGradeNames || formData.targetGradeNames.length === 0) {\r\n        setSnackbarMessage('At least one target grade level must be selected.');\r\n        setSnackbarSeverity('error');\r\n        setSnackbarOpen(true);\r\n        return;\r\n      }\r\n      \r\n      // Validate typesOfCheckups only for HEALTH_CHECKUP events\r\n      if (formData.eventType === 'HEALTH_CHECKUP') {\r\n        if (!formData.typesOfCheckups || formData.typesOfCheckups.length === 0) {\r\n          setSnackbarMessage('At least one checkup type must be selected for health checkup events.');\r\n          setSnackbarSeverity('error');\r\n          setSnackbarOpen(true);\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // Validate selectedVaccines only for VACCINATION events\r\n      if (formData.eventType === 'VACCINATION') {\r\n        if (!formData.selectedVaccines || formData.selectedVaccines.length === 0) {\r\n          setSnackbarMessage('At least one vaccine type must be selected for vaccination events.');\r\n          setSnackbarSeverity('error');\r\n          setSnackbarOpen(true);\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // Prepare data for submission - targetGradeIds is already in correct format\r\n      const finalData = {...formData};\r\n      \r\n      // Remove typesOfCheckups if not needed (for VACCINATION events)\r\n      if (formData.eventType !== 'HEALTH_CHECKUP') {\r\n        delete finalData.typesOfCheckups;\r\n      }\r\n      \r\n      // Remove selectedVaccines if not needed (for HEALTH_CHECKUP events) \r\n      if (formData.eventType !== 'VACCINATION') {\r\n        delete finalData.selectedVaccines;\r\n      }\r\n      \r\n      // Rename fields to match backend DTO\r\n      finalData.scheduledDate = finalData.startDate;  // Map startDate to scheduledDate\r\n      \r\n      onSubmit(finalData);\r\n      \r\n    } catch (error) {\r\n      console.error('Error in form submission:', error);\r\n      setSnackbarMessage('An error occurred while submitting the form. Please try again.');\r\n      setSnackbarSeverity('error');\r\n      setSnackbarOpen(true);\r\n    }\r\n  };\r\n  \r\n  // Close notification\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n  \r\n  // Get health checkup types from state (loaded from API)\r\n  const getHealthCheckupTypes = () => {\r\n    return healthCheckupTypes;\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Paper elevation={3} sx={{ p: 3, mt: 2 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          {isEdit ? 'Edit Event' : 'Create New Event'}\r\n        </Typography>\r\n        \r\n        {gradeLevelsLoading ? (\r\n          <Box display=\"flex\" justifyContent=\"center\" p={3}>\r\n            <CircularProgress />\r\n            <Typography variant=\"body2\" sx={{ ml: 2 }}>\r\n              Loading grade levels...\r\n            </Typography>\r\n          </Box>\r\n        ) : (\r\n          <form onSubmit={handleSubmit}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              label=\"Event Name\"\r\n              name=\"eventName\"\r\n              value={formData.eventName}\r\n              onChange={handleChange}\r\n              fullWidth\r\n              required\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12}>\r\n            <FormControl fullWidth required>\r\n              <InputLabel id=\"event-type-label\">Event Type</InputLabel>\r\n              <Select\r\n                labelId=\"event-type-label\"\r\n                id=\"eventType\"\r\n                name=\"eventType\"\r\n                value={formData.eventType}\r\n                onChange={handleChange}\r\n                label=\"Event Type\"\r\n              >\r\n                <MenuItem value=\"HEALTH_CHECKUP\">General Health Checkup</MenuItem>\r\n                <MenuItem value=\"VACCINATION\">Vaccination</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12}>\r\n            <TextField\r\n              label={formData.eventType === 'VACCINATION' ? 'Vaccine Description' : 'Description'}\r\n              name=\"description\"\r\n              value={formData.description}\r\n              onChange={handleChange}\r\n              multiline\r\n              rows={3}\r\n              fullWidth\r\n              placeholder={formData.eventType === 'VACCINATION' \r\n                ? 'Enter vaccine description or details'\r\n                : 'Enter event description'\r\n              }\r\n              helperText={formData.eventType === 'VACCINATION' \r\n                ? 'Provide details about the vaccination event'\r\n                : 'Provide details about the health event'\r\n              }\r\n            />\r\n            \r\n            {/* Show vaccine dropdown for VACCINATION events */}\r\n            {formData.eventType === 'VACCINATION' && (\r\n              <FormControl fullWidth sx={{ mt: 2 }}>\r\n                <InputLabel id=\"vaccines-select-label\">Select Vaccines</InputLabel>\r\n                <Select\r\n                  labelId=\"vaccines-select-label\"\r\n                  multiple\r\n                  value={Array.isArray(formData.selectedVaccines) ? formData.selectedVaccines : []}\r\n                  onChange={(e) => {\r\n                    const selectedVaccines = Array.isArray(e.target.value) ? e.target.value : [];\r\n                    setFormData(prev => ({\r\n                      ...prev,\r\n                      selectedVaccines: selectedVaccines\r\n                    }));\r\n                  }}\r\n                  input={<OutlinedInput label=\"Select Vaccines\" />}\r\n                  renderValue={(selected) => (\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                      {selected.map((vaccineId) => {\r\n                        const vaccine = vaccines.find(vac => vac.vaccineId.toString() === vaccineId);\r\n                        const label = vaccine ? vaccine.name : vaccineId;\r\n                        return <Chip key={vaccineId} label={label} size=\"small\" />;\r\n                      })}\r\n                    </Box>\r\n                  )}\r\n                  disabled={vaccinesLoading}\r\n                >\r\n                  {vaccinesLoading ? (\r\n                    <MenuItem disabled>\r\n                      <CircularProgress size={20} />\r\n                      <Typography sx={{ ml: 1 }}>Loading vaccines...</Typography>\r\n                    </MenuItem>\r\n                  ) : (\r\n                    vaccines.map((vaccine) => (\r\n                      <MenuItem key={vaccine.vaccineId} value={vaccine.vaccineId.toString()}>\r\n                        <Typography variant=\"body2\">\r\n                          <strong>{vaccine.name}</strong>\r\n                          {vaccine.diseaseTargeted && (\r\n                            <Typography component=\"span\" variant=\"caption\" color=\"text.secondary\">\r\n                              {' - '}{vaccine.diseaseTargeted}\r\n                            </Typography>\r\n                          )}\r\n                        </Typography>\r\n                      </MenuItem>\r\n                    ))\r\n                  )}\r\n                </Select>\r\n                <FormHelperText>\r\n                  {vaccinesLoading ? 'Loading vaccines from database...' : 'Select one or more vaccines from the database'}\r\n                </FormHelperText>\r\n              </FormControl>\r\n            )}\r\n\r\n            {/* Show checkup types for HEALTH_CHECKUP events */}\r\n            {formData.eventType === 'HEALTH_CHECKUP' && (\r\n              <>\r\n                <FormControl fullWidth sx={{ mt: 2 }}>\r\n                  <InputLabel id=\"checkup-types-label\">Checkup Types</InputLabel>\r\n                  <Select\r\n                    labelId=\"checkup-types-label\"\r\n                    multiple\r\n                    value={Array.isArray(formData.typesOfCheckups) ? formData.typesOfCheckups : []}\r\n                    onChange={(e) => setFormData({...formData, typesOfCheckups: Array.isArray(e.target.value) ? e.target.value : []})}\r\n                    input={<OutlinedInput label=\"Checkup Types\" />}\r\n                    disabled={checkupTypesLoading}\r\n                    renderValue={(selected) => {\r\n                      // Ensure selected is an array before mapping\r\n                      const selectedArray = Array.isArray(selected) ? selected : [];\r\n                      return (\r\n                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                          {selectedArray.map((value) => {\r\n                            const type = getHealthCheckupTypes().find(t => t.value === value);\r\n                            return <Chip key={value} label={type ? type.label : value} />;\r\n                          })}\r\n                        </Box>\r\n                      );\r\n                    }}\r\n                  >\r\n                    {checkupTypesLoading ? (\r\n                      <MenuItem disabled>\r\n                        <CircularProgress size={20} sx={{ mr: 1 }} />\r\n                        <Typography sx={{ ml: 1 }}>Loading checkup types...</Typography>\r\n                      </MenuItem>\r\n                    ) : (\r\n                      getHealthCheckupTypes().map((type) => (\r\n                        <MenuItem key={type.value} value={type.value}>\r\n                          <Typography variant=\"body2\">\r\n                            <strong>{type.label}</strong>\r\n                            {type.description && (\r\n                              <Typography component=\"span\" variant=\"caption\" color=\"text.secondary\" display=\"block\">\r\n                                {type.description}\r\n                              </Typography>\r\n                            )}\r\n                          </Typography>\r\n                        </MenuItem>\r\n                      ))\r\n                    )}\r\n                  </Select>\r\n                  <FormHelperText>\r\n                    {checkupTypesLoading ? 'Loading checkup types from database...' : 'Select one or more checkup types from the database'}\r\n                  </FormHelperText>\r\n                </FormControl>\r\n              </>\r\n            )}\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              label=\"Start Date\"\r\n              name=\"startDate\"\r\n              type=\"date\"\r\n              value={formData.startDate}\r\n              onChange={handleChange}\r\n              InputLabelProps={{ shrink: true }}\r\n              fullWidth\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              label=\"End Date\"\r\n              name=\"endDate\"\r\n              type=\"date\"\r\n              value={formData.endDate}\r\n              onChange={handleChange}\r\n              InputLabelProps={{ shrink: true }}\r\n              fullWidth\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              label=\"Location\"\r\n              name=\"location\"\r\n              value={formData.location}\r\n              onChange={handleChange}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12}>\r\n            <GradeLevelSelector\r\n              value={formData.targetGradeNames}\r\n              onChange={handleGradeLevelsChange}\r\n              multiple={true}\r\n              label={t.targetGradeLevels}\r\n              helperText=\"Select one or more grade levels for this event (Grades 1-12 available)\"\r\n              required={true}\r\n              sx={{ mb: 2 }}\r\n            />\r\n          </Grid>\r\n          \r\n          {formData.eventType === 'HEALTH_CHECKUP' && (\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"subtitle1\" color=\"primary\" gutterBottom>\r\n                <strong>Automatic Notification:</strong>\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Health checkup events will automatically appear in the \"Upcoming Checkups\" section for parents\r\n              </Typography>\r\n            </Grid>\r\n          )}\r\n          \r\n          <Grid item xs={12} sx={{ mt: 2 }}>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              {isEdit ? 'Save Changes' : 'Create Event'}\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n        )}\r\n      </Paper>\r\n      <Snackbar open={snackbarOpen} autoHideDuration={3000} onClose={handleCloseSnackbar}>\r\n        <Alert onClose={handleCloseSnackbar} severity={snackbarSeverity} sx={{ width: '100%' }}>\r\n          {snackbarMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default HealthEventForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}